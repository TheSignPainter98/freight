local *

import 'compat' as :apply_compat, :HOST, :test_compat
apply_compat!

import 'quicktype' as :declare_type
declare_type 'Self', 'some'

import 'ox.args' as :Args
import 'ox.instrument' as :instrument
import 'ox.logger' as :log
import 'ox.monitor' as :detect_and_use_monitor
import 'quicktype' as :F
import 'spec' as :run_tests

import 'ox.cmd.clean'
import 'ox.cmd.declare'
import 'ox.cmd.disable'
import 'ox.cmd.edit'
import 'ox.cmd.enable'
import 'ox.cmd.init'
import 'ox.cmd.start'
import 'ox.cmd.upgrade'
import 'ox.logger'
import 'spec'

-- Import type definitions
require 'ox.component'

debug_ = require 'ox.cmd.debug'

global skip_minecraft_tests = false
-- Some tests have unsuppressible error output in valid cases. This is a hack
-- to avoid mental false-positives by users.
global run_ugly_tests = false

force_error_on_bad_exit = false

main = (raw_args) ->
  args, ok = Args::parse raw_args
  if not ok
    return

  logger.set_log_verbosity not args.terse
  if args.test?
    logger.activate_test_mode!
    spec.set_log_verbosity args.test.verbose

  force_error_on_bad_exit = args.force_error_on_bad_exit

  if args.instrument
    instrument -> run args
  else
    run args

run = (args) ->
  if args.test?
    run_ugly_tests = args.test.run_ugly_tests
    skip_minecraft_tests = args.test.no_minecraft
    ok = run_tests args.test.filter
    if not ok
      os.exit 1
  else if args.start?
    if not args.ignore_monitor
      detect_and_use_monitor!
    -- deactivate_typechecks!
    start.main args.start
  else if args.init?
    init.main args.init
  else if args.clean?
    clean.main args.clean
  else if args.enable?
    enable.main args.enable
  else if args.disable?
    disable.main args.disable
  else if args.edit?
    edit.main args.edit
  else if args.declare?
    declare.main args.declare
  else if args.upgrade?
    upgrade.main args.upgrade
  else if args.debug?
    debug_.main args.debug
  else
    error 'internal error: no command recognised'

spec.spec ->
  import 'spec' as :describe, :it

  describe 'compat', ->
    it 'passes checks', ->
      test_compat!

args = {...}
ok = true
try
  main args
catch err
  if err != 'EXIT(0)'
    if HOST == 'native'
      io.stderr\write debug.traceback err
    else
      print debug.traceback err
    ok = false
switch HOST
  when 'native'
    if not ok
      os.exit 1
  when 'minecraft'
    if not ok and force_error_on_bad_exit
      os.exit 1
  else
    error "internal error: unrecognised host #{HOST}"

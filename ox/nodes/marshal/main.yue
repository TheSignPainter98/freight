local *

-- TODO(kcza): Check station-name uniqueness

import 'compat' as :HOST
import 'ox.cmd.declare' as :DeclareTrainStateResponse
import 'ox.configurator.main' as :GetConfigRequest, :GetConfigResponse, :MarshalIdentityRequest, :MarshalIdentityResponse, :SetConfigRequest, :SetConfigResponse
import 'ox.data.queue' as :Queue
import 'ox.firewall' as :Firewall
import 'ox.logger' as :log, :trace
import 'ox.nodes.factory.main' as :FactoryHeartbeat, :ScheduleRequest, :ScheduleResponse
import 'ox.nodes.marshal.resource_orchestrator.promise_tracker' as :PromiseTracker
import 'ox.nodes.marshal.resource_orchestrator.scheduler' as :Scheduler
import 'ox.nodes.marshal.util.clock' as :MinecraftClock
import 'ox.nodes.marshal.util.pseudo_random' as :PseudoRandom
import 'ox.pc' as :Pc
import 'ox.peripheral.uplink' as :IdempotenceToken, :Packet, :TestUplinkBackend, :TIMEOUT, :Uplink
import 'ox.state' as :State, :StateMachineBuilder
import 'ox.upgrade.listener' as :UpgradeListener
import 'quicktype' as :declare_type, :F, :is, :T
import 'spec' as :spec

import 'ox.toml'

export default_config = -> [=[
[marshal]
resend_cooldown_seconds = 60
]=]

export main = F '(MarshalConfig) -> <>', (config) ->
  log -> 'starting marshal'

  state = nil
  with? io.open '.ox-state.toml'
    state, err = toml.decode assert \read '*a'
    assert \close!
    if err?
      print err
      return

  pc = Pc!
  uplink = Uplink!
  with Marshal :config, :pc, :uplink
    \load!
    \run!

STEP_INTERVAL = 60

declare_type 'Network', [[{
  name: string,
  factories: [Factory],
}]]
declare_type 'Factory', [[{
  -- Constant
  name: string,
  pc_id: number,
  -- Variable
  last_seen_epoch: number,
  stations: DetectedStations,
  stockpile: DetectedStockpile,
}]]
declare_type 'TrainStatus', [[{
  -- Constant:
  name: string,
  -- Variable:
  last_seen_epoch: number,
  last_seen_at_factory: string,
  last_seen_at_station: string,
}]]

declare_type 'MarshalConfig', [[{
  marshal: {
    resend_cooldown_seconds: ?number,
  },
}]]
declare_type 'MarshalEventType', [[
  "new-epoch"
  |"network-packet"
]]
declare_type 'StationAddress', [[{
  factory: Factory,
  station: StationConfig,
}]]
declare_type 'DeliveryOptionSet', [[{
  inbound_station: StationAddress,
  outbound_stations: [StationAddress],
  trains: [AvailableTrain],
}]]
declare_type 'DeliveryOption', [[{
  inbound_station: string,
  outbound_station: string,
  train: AvailableTrain,
}]]
declare_type 'AvailableTrain', [[{
  at_factory: {
    name: string,
    pc_id: number,
  },
  at_station: {
    name: string,
  },
  name: string,
}]]
declare_type 'MarshalSnapshot', [[{
  version: number,
  epoch: number,
  promise_tracker_snapshot: PromiseTrackerSnapshot,
}]]
declare_type 'MarshalOpts', [[{
  config: MarshalConfig+StoredConfig,
  pc: Pc,
  uplink: Uplink,
  rand: ?Random,
  clock: ?Clock,
}]]
export class Marshal
  @SAVE_FILE: '.marshal-state.json'

  new: F '(MarshalOpts) => <>', (opts) =>
    {
      :config,
      :pc,
      :uplink,
      :rand=PseudoRandom!,
      :clock=MinecraftClock!
    } = opts
    @pc = pc
    @uplink = uplink
    @clock = clock

    @set_config config
    @epoch = T 'number', 0
    -- TODO(kcza): load from stored initial state
    @factories = T '{string->Factory}', {}
    @trains = T '{string->TrainStatus}', {}
    @rand = rand
    @promise_tracker = PromiseTracker @rand, @clock
    @scheduler = Scheduler
      clock: @clock
      resend_cooldown_seconds: @config.resend_cooldown_seconds
      rand: @rand
      promise_tracker: @promise_tracker

    @do_count_epochs = T 'boolean', true
    @throttle = T 'boolean', HOST == 'minecraft'

    @upgrade_listener = T 'UpgradeListener',
      UpgradeListener config, uplink

    @events = T 'Queue', Queue!

  make_sm: F '() => StateMachine', =>
    (StateMachineBuilder 'marshal')
      \set_initial_state 'waiting'
      \add (State 'waiting')
        \add_transition_to 'inspecting_packet'
        \add_transition_to 'changing_epoch'
        \add_transition_to 'applying_config'
        \declare_end_state!
      \add (State 'inspecting_packet')
        \add_transition_to 'analysing_marshal_identity_request'
      \add (State 'analysing_marshal_identity_request')
        \add_transition_to 'sending_marshal_identity_response'
      \add (State 'sending_marshal_identity_response')
        \add_transition_to 'waiting'
      \add (State 'changing_epoch')
        \add_transition_to 'waiting'
      \add (State 'applying_config')
        \add_transition_to 'waiting'
      \build!

  save: F '() => <>', =>
    encoded = @encode_snapshot @snapshot!
    with assert io.open @@SAVE_FILE, 'w+'
      assert \write encoded
      assert \close!
    return

  snapshot: F '() => MarshalSnapshot', =>
    ret =
      version: 1
      epoch: @epoch
      promise_tracker_snapshot: @promise_tracker\snapshot!
    ret

  encode_snapshot: F '(MarshalSnapshot) => string', (snapshot) =>
    is_list = F '(table) -> boolean', (tab) ->
      num_kv_pairs = 0
      max_key = 0
      min_key = 0
      for key, _ in pairs tab
        if 'number' != type key
          return false
        num_kv_pairs += 1
        if key < min_key
          min_key = key
        else if max_key < key
          max_key = key
      min_key == 1 and num_kv_pairs == max_key
    local encode
    encode = F '(table, some) -> <>', (fragments, value) ->
      with fragments
        switch type value
          when 'function', 'thread'
            error "internal error: cannot encode a #{type value} value"
          when 'table'
            if is_list value
              [] = '['
              first = true
              for elem in *value
                if not first
                  [] = ','
                first = false

                encode fragments, elem
              [] = ']'
            else
              [] = '{'
              first = true
              for k, v in pairs value
                if not first
                  [] = ','
                first = false

                encode fragments, k
                [] = ':'
                encode fragments, v
              [] = '}'
          when 'string'
            [] = "\"#{value\gsub '"', '\\"'}\""
          when 'number', 'boolean'
            [] = tostring value
          else
            error "internal error: unexpected type: #{type value}"
      return

    fragments = {}
    encode fragments, snapshot
    table.concat fragments

  load: F '() => <>', =>
    local raw_snapshot
    with? io.open @@SAVE_FILE, 'r'
      raw_snapshot = assert \read '*a'
      assert \close!
    if not save_data?
      return

    @load_snapshot @decode_snapshot raw_snapshot

  load_snapshot: F '(MarshalSnapshot) => <>', (snapshot) =>
    with snapshot
      assert .version == 1
      @epoch = .epoch
      @promise_tracker\load_snapshot .promise_tracker_snapshot
    return

  decode_snapshot: F '(string) => MarshalSnapshot', (raw) =>
    textutils.unserialiseJSON raw

  run: F '() => !', =>
    parallel.waitForAny table.unpack @tasks!

  tasks: F '() => [() -> !]', =>
    with {}
      [] = @\handle_events
      [] = @\count_epochs
      [] = @\listen_to_network
      for task in *@upgrade_listener\tasks!
        [] = task

  count_epochs: F '() => !', (initial_epoch=1)=>
    EPOCH_PERIOD = 20
    epoch = initial_epoch
    while true
      if @do_count_epochs
        @send_new_epoch_event epoch
        epoch += 1
        os.sleep EPOCH_PERIOD
      else
        coroutine.yield!

  send_new_epoch_event: F '(number) => <>', (epoch) =>
    @events\enqueue type: 'new-epoch', :epoch
    coroutine.yield!
    return

  listen_to_network: F '() => !', =>
    while true
      @read_network!

  read_network: F '() => <>', =>
    log -> "reading network..."
    _, packet = @uplink\receive_from_any!
    import 'spec' as :repr
    log -> "read a #{packet.protocol}"
    trace "read #{repr packet}"
    switch packet.protocol
      when 'FactoryHeartbeat', 'DeclareTrainState', 'MarshalIdentityRequest', 'FactoryPcRequest', 'GetConfigRequest', 'SetConfigRequest'
        @events\enqueue type: 'network-packet', :packet
        coroutine.yield!
      else
        log -> "ignoring #{packet.protocol} packet"
    return

  handle_events: F '() => !', =>
    local events = Queue!
    while true
      @events, events = events, @events

      local event
      dequeue_event = ->
        event = events\dequeue!
        event?
      while dequeue_event!
        @handle_event event

      if @throttle
        os.sleep 0.001 -- Avoid CPU-hogging.
      else
        coroutine.yield!

  handle_event: F '({type: MarshalEventType}) => <>', (event) =>
    with event
      switch .type
        when 'new-epoch'
          @on_new_epoch .epoch
        when 'network-packet'
          @on_network_packet .packet
        else
          error "internal error: unrecognised event type '#{.type}'"
    return

  on_new_epoch: F '(number) => <>', (epoch) =>
    log -> "starting epoch #{epoch}"
    @epoch = epoch
    @prune_factories!
    @prune_trains!
    return

  prune_factories: F '() => <>', =>
    LIFETIME_EPOCHS = 1
    @factories = T '{string->Factory}', @prune_statuses @factories, LIFETIME_EPOCHS

  prune_trains: F '() => <>', =>
    LIFETIME_EPOCHS = 10
    @trains = T '{string->TrainStatus}', @prune_statuses @trains, LIFETIME_EPOCHS

  prune_statuses: F '({string->{last_seen_epoch: number}}, number) => {string->{}}', (statuses, lifetime_epochs) =>
    death_horizon_epoch = @epoch - lifetime_epochs
    with {}
      for name, status in pairs statuses
        if status.last_seen_epoch < death_horizon_epoch
          continue -- Prune
        [name] = status

  on_network_packet: F '(Packet) => <>', (packet) =>
    log -> "handling a #{packet.protocol}"
    switch packet.protocol
      when 'FactoryHeartbeat'
        @on_factory_heartbeat packet
      when 'DeclareTrainState'
        @on_declare_train_state packet
      when 'MarshalIdentityRequest'
        @on_marshal_identity_request packet
      when 'FactoryPcRequest'
        @on_factory_pc_request packet
      when 'GetConfigRequest'
        @on_get_config_request packet
      when 'SetConfigRequest'
        @on_set_config_request packet
      else
        error "internal error: unexpected network packet protocol reached marshal core '#{packet.protocol}'"

  on_factory_heartbeat: F '(FactoryHeartbeat) => <>', (heartbeat) =>
    lost_trains = with {}
      for station in *heartbeat.stations.known
        for train in *station.present_trains
          if @promise_tracker\train_is_lost train
            [] = train
    for lost_train in *lost_trains
      log -> "train '#{lost_train}' was lost. It will be ignored until manually cleared for use"
    factory = @update_system_state heartbeat
    @manage_resources factory

  update_system_state: F '(FactoryHeartbeat) => Factory', (heartbeat) =>
    { :pc_id, :name, :stations, :stockpile } = heartbeat

    factory_status = @factories[name]
    seen_before = factory_status?
    @factories[name] = T 'Factory', with factory_status ?? :name, :pc_id
      if seen_before and pc_id != .pc_id
        log -> "temporarily ignoring possible imposter for factory #{name}: last known PC was ##{.pc_id}, got #{pc_id}"
        return

      .last_seen_epoch = @epoch
      .stations = stations
      .present_trains = present_trains
      .stockpile = stockpile

    for station in *stations.known
      for present_train in *station.present_trains
        @declare_train_seen present_train, name, station.name
    for station in *stations.unknown
      for present_train in *station.present_trains
        @declare_train_seen present_train, name, station.name

    @factories[name]

  declare_train_seen: F '(string, string, string) => <>', (train_name, factory_name, station_name) =>
    @trains[train_name] = T 'TrainStatus', with @trains[train_name] ?? name: train_name
      .last_seen_epoch = @epoch
      .last_seen_at_factory = factory_name
      .last_seen_at_station = station_name
    @promise_tracker\declare_train_seen train_name, station_name

  manage_resources: F '(Factory) => <>', (factory) =>
    low_resources = @get_low_resources factory.stockpile
    import 'spec' as :repr
    log -> "!! low resources: #{repr low_resources}"
    if not low_resources?
      return

    for resource in *low_resources
      @manage_low_resource resource, factory

  get_low_resources: F '(DetectedStockpile) => ?[string]', (stockpile) =>
    low_resources = nil
    for resource in *stockpile.known
      with resource
        if not .shortage_amount?
          continue
        if .stored >= .shortage_amount
          continue

        if not low_resources?
          low_resources = {}
        low_resources[] = .name
    low_resources

  manage_low_resource: F '(string, Factory) => <>', (resource, factory) =>
    MAX_ATTEMPTS = 25

    factory_list = [ factory for _, factory in pairs @factories ]
    table.sort factory_list, (a, b) -> a.name < b.name
    candidates_co = @scheduler\schedule_candidates resource, factory, factory_list
    for _ = 1, MAX_ATTEMPTS
      candidate = do
        ok, yielded = coroutine.resume candidates_co
        if not ok
          error yielded
        if not yielded?
          break
        yielded
      @save!

      {
        train_addr: {
          factory: {
            name: factory_name,
            pc_id: factory_pc_id,
          },
          station: {
            name: station_name,
          },
          name: train_name,
        },
        :schedule,
      } = candidate
      with candidate
        log -> "got candidate: #{train_name} from #{.outbound_station_addr.factory.name}(#{.outbound_station_addr.station.name}) to #{.inbound_station_addr.factory.name}(#{.inbound_station_addr.station.name})"

      idemp_tok = IdempotenceToken!
      @uplink\send_to factory_pc_id, ScheduleRequest idemp_tok, station_name, train_name, schedule

      _, response = @uplink\receive_from factory_pc_id, ScheduleResponse, timeout: 1
      if response == TIMEOUT
        log -> 'discarding candidate due to timeout'
        continue
      if response.idemp_tok != idemp_tok
        continue
      if error_reason = response.error_reason
        log -> "cannot schedule train at #{factory_name}:#{station_name}: #{error_reason}"
      log -> "schedule applied"
      return

    trace "no trains available to take #{resource} to #{factory.name}, will re-attempt next heartbeat"
    return

  on_declare_train_state: F '(DeclareTrainState) => <>', (packet) =>
    { :idemp_tok, :pc_id, :name, :state } = packet
    err = switch state
      when 'cleared' -- TODO(kcza): this name is a leak from the CLI
        @promise_tracker\declare_train_found name
      when 'reserved'
        @promise_tracker\reserve name
        nil
      else
        "internal error: unknown train state '#{state}'"
    @uplink\send_to pc_id, DeclareTrainStateResponse idemp_tok, err

  on_marshal_identity_request: F '(MarshalIdentityRequest) => <>', (packet) =>
    { :idemp_tok, :pc_id, :name } = packet
    if not name?
      @uplink\send_to pc_id, MarshalIdentityResponse idemp_tok, @pc\id!
      return

    @uplink\send_to pc_id,
      MarshalIdentityResponse idemp_tok,
        @factories[name]?.pc_id or "no known factory '#{name}'"

  on_factory_pc_request: F '(FactoryPcRequest) => <>', (packet) =>
    { :idemp_tok, :pc_id, :name } = packet
    factory = @factories[name]
    if not factory?
      @uplink\send_to pc_id, FactoryPcResponse idemp_tok, "no known factory '#{name}'"
      return

    @uplink\send_to pc_id, FactoryPcResponse idemp_tok, factory.pc_id

  on_get_config_request: F '(GetConfigRequest) => <>', (packet) =>
    { :idemp_tok, :pc_id } = packet
    @uplink\send_to pc_id, GetConfigResponse idemp_tok, @config.<raw>

  on_set_config_request: F '(SetConfigRequest) => <>', (packet) =>
    { :idemp_tok, :pc_id, :raw } = packet
    config, err = toml.decode raw
    if err?
      @uplink\send_to pc_id, SetConfigResponse idemp_tok, err
      return

    ok, err = is 'MarshalConfig', config
    if not ok
      @uplink\send_to pc_id, SetConfigResponse idemp_tok, err
      return

    config.<> = {}
    config.<raw> = raw
    @set_config config
    @uplink\send_to pc_id, SetConfigResponse idemp_tok, nil

  set_config: F '(MarshalConfig+StoredConfig) => <>', (@config) =>

  ut_stop_counting_epochs: F '() => <>', =>
    @do_count_epochs = false

  ut_step: F '() => <>', =>
    @ut_tasks ??= with RoundRobin!
      for task in *@tasks!
        \add task

    @ut_tasks\run_pass!

    local event
    dequeue_event = ->
      event = @events\dequeue!
      event?
    while dequeue_event!
      @handle_event event

  ut_epoch: F '() => number', => @epoch

  ut_set_epoch: F '(number) => <>', (epoch) =>
    @epoch = epoch
    assert coroutine.resume coroutine.create ->
      @send_new_epoch_event epoch
    return

  ut_factories: F '() => {string->Factory}', => @factories

  ut_trains: F '() => {string->TrainStatus}', => @trains

  ut_declare_train_lost: F '(string) => <>', (train_name) =>
    @promise_tracker\ut_declare_train_lost train_name

  ut_train_is_lost: F '(string) => boolean', (train_name) =>
    @promise_tracker\train_is_lost train_name

  ut_train_is_reserved: F '(string) => boolean', (train_name) =>
    @promise_tracker\train_is_promised train_name

  ut_config: F '() => MarshalConfig', => @config

class RoundRobin
  new: F '() => <>', =>
    @task_coroutines = T '{number->thread}', {}
    @num_task_coroutines = T 'number', 0
    @started = T 'boolean', false

  add: F '(thread | () -> any) => <>', (task) =>
    assert not @started, "internal error: task added to round robin after execution commenced"

    if 'function' == type task
      task = coroutine.create task
    @num_task_coroutines += 1
    @task_coroutines[] = task

  run_pass: F '() => <>', =>
    @started = true

    all_dead = true
    for i = 1, @num_task_coroutines
      task = @task_coroutines[i]
      if 'dead' == coroutine.status task
        continue
      all_dead = false

      ok, err = coroutine.resume task
      if not ok
        error err
    if all_dead
      error 'internal error: all tasks are complete'

spec ->
  import 'spec_macros' as $

  import 'ox.cmd.declare' as :DeclareTrainState
  import 'ox.nodes.marshal.util.clock' as :TestClock
  import 'ox.pc' as :TestPcBackend
  import 'spec' as :describe, :it, :matchers

  import deep_eq, eq, has_fields, len, lt, matches from matchers

  describe 'Marshal', ->
    describe '\\on_new_epoch', ->
      it 'prunes lost factories', ->
        test_phase = 'add-factories'
        stockpile =
          known:
            * name: 'minecraft:dirt'
              stored: 64
              shortage_amount: 32
          unknown:
            * name: 'minecraft:wood_sword'
              stored: 1
          estimated_capacity: 64
        EXPECTED_FACTORIES = 4

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive: -> with {}
            if test_phase == 'global-disconnect'
              return {}

            stations = F '(number) -> DetectedStations', (i) ->
              switch test_phase
                when 'add-factories'
                  known =
                    * name: "station_#{3 * i}"
                      network: 'network_1'
                      type: 'outbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                    * name: "station_#{3 * i + 1}"
                      network: 'network_2'
                      type: 'inbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                  :known, unknown: {}
                when 'change-factory-stations'
                  known =
                    * name: "station_#{3 * i}"
                      network: 'network_1'
                      type: 'outbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                    * name: "station_#{3 * i + 2}"
                      network: 'network_3'
                      type: 'inbound'
                      handles: 'dirt'
                      capacity: 1
                      present_trains: {}
                  :known, unknown: {}
                else
                  error "internal error: unrecognised test phase #{test_phase}"
            for i = 1, EXPECTED_FACTORIES
              [] =
                from_id: i
                packet: FactoryHeartbeat i, "factory_#{i}", (stations i), stockpile

        pc = Pc!
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          for i = 1, EXPECTED_FACTORIES
            \ut_step!

          epoch = \ut_epoch!
          $assert_that \ut_factories!, has_fields
            factory_1: has_fields
              name: eq 'factory_1'
              pc_id: eq 1
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq 'station_3'
                  * has_fields name: eq 'station_4'
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_2: has_fields
              name: eq 'factory_2'
              pc_id: eq 2
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_6"
                  * has_fields name: eq "station_7"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_3: has_fields
              name: eq 'factory_3'
              pc_id: eq 3
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_9"
                  * has_fields name: eq "station_10"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_4: has_fields
              name: eq 'factory_4'
              pc_id: eq 4
              last_seen_epoch: eq epoch
              stations: has_fields {}
                known: has_fields
                  * has_fields name: eq "station_12"
                  * has_fields name: eq "station_13"
                unknown: len eq 0
              stockpile: deep_eq stockpile

          test_phase = 'change-factory-stations'
          uplink.backend\reset!
          for i = 1, EXPECTED_FACTORIES
            \ut_step!

          $assert_that \ut_factories!, has_fields
            factory_1: has_fields
              name: eq 'factory_1'
              pc_id: eq 1
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_3"
                  * has_fields name: eq "station_5"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_2: has_fields
              name: eq 'factory_2'
              pc_id: eq 2
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_6"
                  * has_fields name: eq "station_8"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_3: has_fields
              name: eq 'factory_3'
              pc_id: eq 3
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_9"
                  * has_fields name: eq "station_11"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_4: has_fields
              name: eq 'factory_4'
              pc_id: eq 4
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_12"
                  * has_fields name: eq "station_14"
                unknown: len eq 0
              stockpile: deep_eq stockpile

          test_phase = 'global-disconnect'
          uplink.backend\reset!
          \ut_set_epoch 10
          \ut_step!

          $expect_that \ut_factories!, deep_eq {}

    it 'respects the scheduler', ->
      -- TODO(kcza): test valid schedules are made
      --  - Ensure correct network
      --  - Ensure correct resource handling
      --  - Ensure correct in/outbound handling
      --  - MAYBE Run many times, shim `pick` to ensure progression

    describe '\\on_declare_train_state', ->
      it 'handles lost and not lost trains', ->
        idemp_tok = IdempotenceToken!

        PC_ID = 1
        TRAIN_NAME = 'some-train-name'

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'cleared'
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'cleared'
        pc = Pc!
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          \ut_declare_train_lost TRAIN_NAME
          $assert_that (\ut_train_is_lost TRAIN_NAME), eq true

          \ut_step!
          $assert_that (\ut_train_is_lost TRAIN_NAME), eq false
          $assert_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: eq nil
            protocol: eq DeclareTrainStateResponse::protocol!

          \ut_step!
          $assert_that (\ut_train_is_lost TRAIN_NAME), eq false
          $assert_that uplink.backend.sent, len eq 2
          $expect_that uplink.backend.sent[2], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: matches 'was not lost'
            protocol: eq DeclareTrainStateResponse::protocol!

      it 'handles train reservations', ->
        idemp_tok = IdempotenceToken!

        PC_ID = 1
        TRAIN_NAME = 'some-train-name'

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'reserved'
            * from_id: PC_ID
              packet: DeclareTrainState idemp_tok, PC_ID, TRAIN_NAME, 'reserved'

        pc = Pc!
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          $assert_that (\ut_train_is_reserved TRAIN_NAME), eq false

          \ut_step!
          $assert_that (\ut_train_is_reserved TRAIN_NAME), eq true
          $assert_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: eq nil
            protocol: eq DeclareTrainStateResponse::protocol!

          \ut_step!
          -- Check re-declarations are ignored
          $assert_that uplink.backend.sent, len eq 2
          $expect_that uplink.backend.sent[2], has_fields
            id: eq PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: eq nil
            protocol: eq DeclareTrainStateResponse::protocol!

    describe '\\on_marshal_identity_request', ->
      it 'responds to marshal requests', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: MarshalIdentityRequest idemp_tok, REQUESTER_PC_ID
        pc = Pc TestPcBackend
          id: => MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          \ut_step!

        $expect_that uplink.backend.sent, len eq 1
        $expect_that uplink.backend.sent[1], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            resp: eq MARSHAL_PC_ID
          protocol: eq MarshalIdentityResponse::protocol!

      it 'responds to factory requests', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2
        FACTORY_NAME = 'factory'
        FACTORY_PC_ID = 12345

        config =
          <raw>: ''
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: MarshalIdentityRequest idemp_tok, REQUESTER_PC_ID, FACTORY_NAME
            * from_id: FACTORY_PC_ID
              packet: do
                stations =
                  known: {}
                  unknown: {}
                stockpile =
                  known: {}
                  unknown: {}
                  estimated_capacity: 0
                FactoryHeartbeat FACTORY_PC_ID, FACTORY_NAME, stations, stockpile
            * from_id: REQUESTER_PC_ID
              packet: MarshalIdentityRequest idemp_tok, REQUESTER_PC_ID, FACTORY_NAME

        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          \ut_step!
          \ut_step!
          \ut_step!

        $expect_that uplink.backend.sent, len eq 2
        $expect_that uplink.backend.sent[1], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            resp: matches 'no known factory'
          protocol: eq MarshalIdentityResponse::protocol!
        $expect_that uplink.backend.sent[2], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            resp: eq FACTORY_PC_ID
          protocol: eq MarshalIdentityResponse::protocol!

    describe '\\on_get_config_request', ->
      it 'responds correctly', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 1
        RAW = '[config]\n'

        config =
          <raw>: RAW
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: GetConfigRequest idemp_tok, REQUESTER_PC_ID
        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          \ut_step!

        $expect_that uplink.backend.sent, len eq 1
        $expect_that uplink.backend.sent[1], has_fields
          id: eq REQUESTER_PC_ID
          packet: has_fields
            idemp_tok: eq idemp_tok
            raw: eq RAW
          protocol: eq GetConfigResponse::protocol!

    describe '\\on_set_config_request', ->
      it 'applies valid config', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2
        NEW_RAW = [[
          [marshal]
          key = 'value'
        ]]

        config =
          <raw>: ''
          marshal: {}
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: SetConfigRequest idemp_tok, REQUESTER_PC_ID, NEW_RAW

        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          \ut_step!

          $expect_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq REQUESTER_PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              resp: eq nil
            protocol: eq SetConfigResponse::protocol!
          $expect_that \ut_config!, deep_eq
            marshal:
              key: 'value'
          $expect_that \ut_config!.<raw>, eq NEW_RAW

      it 'rejects invalid config', ->
        idemp_tok = IdempotenceToken!

        REQUESTER_PC_ID = 1
        MARSHAL_PC_ID = 2
        NEW_RAW = '[invalid-config]\n'
        ORIGINAL_RAW = [[
          [marshal]
        ]]

        config =
          <raw>: ORIGINAL_RAW
          marshal: {}
        uplink = Uplink TestUplinkBackend
          to_receive:
            * from_id: REQUESTER_PC_ID
              packet: SetConfigRequest idemp_tok, REQUESTER_PC_ID, NEW_RAW
        pc = Pc TestPcBackend
          id: -> MARSHAL_PC_ID
        with Marshal :config, :pc, :uplink, clock: TestClock!
          \ut_stop_counting_epochs!
          \ut_step!

          $expect_that uplink.backend.sent, len eq 1
          $expect_that uplink.backend.sent[1], has_fields
            id: eq REQUESTER_PC_ID
            packet: has_fields
              idemp_tok: eq idemp_tok
              error_reason: matches 'at field %.marshal'
            protocol: eq SetConfigResponse::protocol!
          $expect_that \ut_config!, deep_eq config -- Unchanged
          $expect_that \ut_config!.<raw>, eq ORIGINAL_RAW

    it 'survives snapshotting', ->
      if HOST != 'minecraft'
        return -- Skip test due to missing JSON decoder (currently textutils is hard-coded).

      MARSHAL_PC_ID = 2
      RAW_CONFIG = '[marshal]\n'

      config =
        <raw>: RAW_CONFIG
        marshal: {}
      uplink = Uplink TestUplinkBackend!
      pc = Pc TestPcBackend
        id: -> MARSHAL_PC_ID
      rand = PseudoRandom!
      clock = TestClock!
      opts =
        :config
        :pc
        :uplink
        :rand
        :clock

      local snapshot
      marshal = with Marshal opts
        snapshot = \encode_snapshot \snapshot!

      loaded_marshal = with Marshal opts
        \load_snapshot \decode_snapshot snapshot

      $expect_that loaded_marshal, deep_eq marshal

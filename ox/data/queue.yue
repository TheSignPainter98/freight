local *

import 'quicktype' as :declare_type, :F, :T
import 'spec' as :spec

declare_type 'Queue', [[{
  len: () => number,
  enqueue: (some) => <>,
  dequeue: () => ?some,
  extract: ((some) -> boolean) => ?some,
  peek: () => ?some,
  iter: () => function,
}]]
export class Queue
  new: F '(string) => <>', (@elem_type) =>
    @elems = {}
    @front = 1
    @back = 1
    @_len = 0

  len: F '() => number', =>
    @_len

  enqueue: F '(some) => <>', (elem) =>
    @elems[@back] = T @elem_type, elem
    @back += 1
    @_len += 1

  dequeue: F '() => ?some', =>
    ret = @elems[@front]
    if ret?
      T @elem_type, ret
      @elems[@front] = nil
      @front += 1
      @_len -= 1
    ret

  peek: F '() => ?some', =>
    @elems[@front]

  extract: F '((some) -> boolean) => ?some', (filter) =>
    for i = @front, @back
      elem = @elems[i]
      if not elem?
        continue
      if filter elem
        @elems[i] = nil
        if i == @front
          while not @elems[@front]?
            @front += 1
        @_len -= 1

        return elem
    nil

  iter: =>
    coroutine.wrap ->
      i = @front
      back = @back
      while i != back
        elem = @elems[i]
        if not elem?
          continue
        coroutine.yield T @elem_type, elem
        i += 1

spec ->
  import 'spec_macros' as $

  import 'spec' as :describe, :it, :matchers

  import contains, deep_eq, eq, errors, matches from matchers

  describe 'Queue', ->
    it 'dequeues nil on empty', ->
      with Queue 'any'
        $expect_that \dequeue!, eq nil

    it 'dequeues in the right order', ->
      with Queue 'string'
        $expect_that \len!, eq 0
        \enqueue 'one'
        \enqueue 'two'
        \enqueue 'three'
        $expect_that \len!, eq 3
        $expect_that \dequeue!, eq 'one'
        $expect_that \dequeue!, eq 'two'
        $expect_that \dequeue!, eq 'three'
        $expect_that \dequeue!, eq nil
        $expect_that \len!, eq 0
        \enqueue 'four'
        \enqueue 'five'
        $expect_that \len!, eq 2
        $expect_that \dequeue!, eq 'four'
        $expect_that \dequeue!, eq 'five'

    it 'typechecks on enqueue', ->
      with Queue 'string'
        $expect_that (-> \enqueue 123), errors matches 'expected string but got number'

    it 'typechecks on dequeue', ->
      with Queue '{ interloper: nil }'
        elem = {}
        \enqueue elem
        elem.interloper = 'interloper'

        $expect_that (-> \dequeue!), errors matches 'expected nil but got string'

    describe '\\extract', ->
      it 'extracts and handles length', ->
        queue = with Queue 'some'
          for i = 1, 3
            \enqueue i

          extracted = \extract (elem) -> elem == 2
          $expect_that extracted, eq 2
          $expect_that \len!, eq 2

          extracted = \extract (elem) -> elem == 2
          $expect_that extracted, eq nil
          $expect_that \len!, eq 2

      it 'does not change on missing items', ->

    describe '\\iter', ->
      it 'yields in the correct order', ->
        with Queue 'string'
          \enqueue 'one'
          \enqueue 'two'
          \enqueue 'three'

          $expect_that [ elem for elem in \iter! ], deep_eq
            * 'one'
            * 'two'
            * 'three'

      it 'typechecks yielded elements', ->
        with Queue '{interloper: nil}'
          elem = {}
          \enqueue elem
          elem.interloper = 'interloper'

          $expect_that (-> [ elem for elem in \iter! ]), errors matches 'expected nil but got string'

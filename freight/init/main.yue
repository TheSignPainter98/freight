local *

import Flag, Param, Subcommand from require 'clap'
import CONFIG_FILE from require 'freight.config'
import parse_toml from require 'freight.toml'
import F from require 'quicktype'
import spec from require 'spec'

display = require 'freight.display.main'
factory = require 'freight.factory.main'
ledger = require 'freight.ledger.main'

export subcommand = with Subcommand 'init'
  \description 'initialise this freight instance'
  \add with Flag 'force'
    \description 'overwrite existing config'
  \add with Param 'instance-type'
    \description 'the type of instance to initialise'
    \options
      * 'display'
      * 'factory'
      * 'ledger'
      * 'marshal'

default_config_by_type =
  display: (require 'freight.display.main').default_config
  factory: (require 'freight.factory.main').default_config
  ledger: (require 'freight.ledger.main').default_config
  marshal: (require 'freight.marshal.main').default_config

export main = F '({}) -> <>', (args) ->
  default_config = default_config_by_type[args.instance_type]
  if not default_config?
    error "internal error: unrecognised instance type '#{args.instance_type}'"

  if not args.force
    with? io.open CONFIG_FILE, 'r'
      \close!
      print "#{CONFIG_FILE} already exists"
      return

  temp_config_path = os.tmpname!
  with assert io.open temp_config_path, 'w+'
    assert \write default_config
    assert \close!

  config_is_valid = false
  while not config_is_valid
    while true
      print 'press [ENTER] edit freight.toml, [q] to abort'
      resp = io.read '*l'
      switch resp
        when 'q'
          assert os.remove temp_config_path
          print 'aborted'
          return
        when ''
          break

    if shell?
      shell.execute 'edit', temp_config_path
    else
      os.execute "nvim '#{temp_config_path}'"

    config_is_valid = validate_config temp_config_path, args.instance_type

  os_rename_assert = (...) ->
    if 0 == select '#', ...
      return
    assert ...
  os_rename_assert os.rename temp_config_path, CONFIG_FILE

  print "#{args.instance_type} configured"
  return

validate_config = F '(string, string) -> boolean', (file, instance_type) ->
  local raw_config
  with assert io.open file, 'r'
    raw_config = assert \read '*a'
    assert \close!

  local config, err
  try
    config = parse_toml raw_config
  catch err2
    err = err2
  if err?
    print err
    return false

  if not config[instance_type]?
    print "config does not contain #{instance_type} section"
    return false

  true

spec ->
  import 'spec_macros' as $
  import describe, it, matchers from require 'spec'
  import has_fields, has_type, no_errors from matchers

  configs = [:name, :raw for name, raw in pairs default_config_by_type]
  table.sort configs, (a, b) -> a.name < b.name

  for config in *configs
    describe "default #{config.name} config", ->
      it 'is valid toml', ->
        parsed_default_config = parse_toml config.raw

        $expect_that parsed_default_config, has_type 'table'
        $expect_that parsed_default_config, has_fields
          [config.name]: has_type 'table'

local *

import F, declare_type, declare_singleton_type from require 'quicktype'
import spec from require 'spec'

export TIMEOUT = <tostring>: => "Timeout"
declare_singleton_type TIMEOUT

declare_type 'UplinkBackend', [[{
  send: (number, any, ?string) => boolean,
  receive: (?string, ?number) => <?number, any, ?string>,
  broadcast: (any, ?string) => <>,
}]]

declare_type 'Uplink', [[{
  broadcast: (Packet) => <>,
  send_to: (number, Packet) => <>,
  receive_from_any: (Packet, ?UplinkReceiveOpts) => <?number, Packet|TIMEOUT>,
  receive_from: (number, Packet, ?UplinkReceiveOpts) => <?number, Packet|TIMEOUT>,
}]]
export class Uplink
  new: F '(?UplinkBackend) => <>', (@backend=MinecraftBackend!) =>
    @deaf = false

  deafen: F '() => <>', =>
    @deaf = true

  broadcast: F '(Packet) => <>', (message) =>
    @backend\broadcast message, message\protocol!

  send_to: F '(number, Packet) => <>', (to_id, message) =>
    ok = @backend\send to_id, message, message\protocol!
    if not ok
      error "failed to send #{message\protocol!}"

  receive_from_any: F '(?Packet, ?UplinkReceiveOpts) => <?number, Packet|TIMEOUT>', (message_type, opts={}) =>
    @_receive_from nil, message_type, opts

  receive_from: F '(number, ?Packet, ?UplinkReceiveOpts) => <?number, Packet|TIMEOUT>', (from_id, message_type, opts={}) =>
    @_receive_from from_id, message_type, opts

  _receive_from: F '(?number, ?Packet, ?UplinkReceiveOpts) => <?number, Packet|TIMEOUT>', (from_id, message_type, opts={}) =>
    {:timeout} = opts

    local id, message, protocol
    protocol_filter = message_type?::protocol!
    while true
      id, message, protocol = @backend\receive protocol_filter, timeout
      if @deaf
        continue

      if not id?
        return nil, TIMEOUT
      if not from_id? or id == from_id
        break

    if not message_type?
      message.<> = __index: protocol: => protocol
      return id, message

    data, ok = message_type::from message, protocol
    if not ok
      error "unexpected message #{message}, expected #{message_type::protocol!}"
    id, data
declare_type 'UplinkReceiveOpts', [[{
  timeout: ?number,
}]]

declare_type 'PeripheralType', '"modem"'
class MinecraftBackend
  new: =>
    peripheral.find 'modem', rednet.open
    if not rednet.isOpen!
      error 'cannot create Uplink: no modem'

  send: F '(number, any, ?string) => boolean', (recipient, message, protocol) =>
    rednet.send recipient, message, protocol

  receive: F '(?string, ?number) => <?number, ?any, ?string>', (protocol, timeout) =>
    rednet.receive protocol, timeout

  broadcast: F '(any, ?string) => <>', (message, protocol) =>
    rednet.broadcast message, protocol

declare_type 'Packet', [[{
  protocol: () => string,
}]]
export class Packet
  @protocol: F '() => string', =>
    @.__class.__name

  protocol: F '() => string', => @@protocol!

  @from: F '({}, string) => <?Packet, boolean>', (raw, raw_protocol) =>
    if raw_protocol == @@protocol!
      raw.<> = __index: @
      raw, true
    else
      nil, false

declare_type 'TestUplinkBackendOpts', [[{
  send: ?(number, any, ?string) => boolean,
  receive: ?(?string, ?number) => <?number, any, ?string>,
  broadcast: ?(any, ?string) => <>,
}]]
export class TestUplinkBackend
  new: F '(?TestUplinkBackendOpts) => <>', (opts={}) =>
    {
      :send=-> error 'send unimplemented'
      :receive=-> error 'receive unimplemented'
      :broadcast=-> error 'broadcast unimplemented'
    } = opts
    @send = F '(number, any, ?string) => boolean', send
    @receive = F '(?string, ?number) => <?number, any, ?string>', receive
    @broadcast = F '(any, ?string) => <>', broadcast

declare_type 'IdempotenceToken', 'number'
IDEMP_TOK_MAX = bit.lshift 1, 30
export IdempotenceToken = F '() -> IdempotenceToken', ->
  math.random 1, IDEMP_TOK_MAX

spec ->
  import 'spec_macros' as $
  import describe, it, matchers from require 'spec'
  import deep_eq, eq, errors, matches, no_errors from matchers

  class TestPacket extends Packet
    new: (@data) =>

  class TestPacket2 extends Packet
    new: (@data) =>

  describe 'Uplink', ->
    describe 'default backend', ->
      if not _G.skip_minecraft_tests
        return

      it 'requires a modem', ->
        if peripheral.find 'modem'
          $expect_that (-> Uplink!), no_errors!
        else
          $expect_that (-> Uplink!), errors matches 'cannot find modem'

    describe '\\broadcast', ->
      it 'sends the given packet', ->
        broadcasted = {}
        uplink = Uplink TestUplinkBackend
          broadcast: (message, protocol) =>
            broadcasted[] = :message, :protocol

        class TestPacket extends Packet
          new: (@data) =>

        uplink\broadcast TestPacket 'data-1'
        uplink\broadcast TestPacket 'data-2'

        $expect_that broadcasted, deep_eq
          * protocol: 'TestPacket', message: TestPacket 'data-1'
          * protocol: 'TestPacket', message: TestPacket 'data-2'

    describe '\\send_to', ->
      it 'sends the given packet', ->
        sent = {}
        uplink = Uplink TestUplinkBackend
          send: (recipient, message, protocol) =>
            sent[] = :recipient, :message, :protocol
            true

        uplink\send_to 1, TestPacket 'message-1'
        uplink\send_to 2, TestPacket 'message-2'

        $expect_that sent, deep_eq
          * recipient: 1, protocol: 'TestPacket', message: TestPacket 'message-1'
          * recipient: 2, protocol: 'TestPacket', message: TestPacket 'message-2'

      it 'handles transmission failure', ->
        uplink = Uplink TestUplinkBackend
          send: -> false

        $expect_that (-> uplink\send_to 1, TestPacket 'message-1'), errors matches "failed to send TestPacket"

    describe '\\receive_from_any', ->
      it 'receives the only given packet', ->
        frames =
          * sender: 1, protocol: 'TestPacket', message: TestPacket 'message-1'
          * sender: 2, protocol: 'TestPacket2', message: TestPacket2 'message-2'
          * sender: 3, protocol: 'TestPacket', message: TestPacket 'message-3'
          * sender: 4, protocol: 'TestPacket2', message: TestPacket2 'message-4'
        num_received = 0
        uplink = Uplink TestUplinkBackend
          receive: (protocol, timeout) =>
            local frame
            repeat
              num_received += 1
              frame = frames[num_received]
              if not frame?
                return nil, TIMEOUT
            until frame.protocol == protocol
            frame.sender, frame.message, frame.protocol

        received = with {}
          [] = { uplink\receive_from_any TestPacket2 }
          [] = { uplink\receive_from_any TestPacket }

        $expect_that received, deep_eq
          * { 2, TestPacket 'message-2' }
          * { 3, TestPacket 'message-3' }

      it 'gracefully handles timeout', ->
        uplink = Uplink TestUplinkBackend
          receive: (_, _) -> nil, nil, nil
        id, err = uplink\receive_from_any TestPacket
        $expect_that id, eq nil
        $expect_that err, eq TIMEOUT

    describe '\\receive_from', ->
      it 'receives the only given packet', ->
        frames =
          * sender: 1, protocol: 'TestPacket', message: TestPacket 'message-1'
          * sender: 2, protocol: 'TestPacket2', message: TestPacket2 'message-2'
          * sender: 3, protocol: 'TestPacket', message: TestPacket 'message-3'
          * sender: 4, protocol: 'TestPacket2', message: TestPacket2 'message-4'
        num_received = 0
        uplink = Uplink TestUplinkBackend
          receive: (protocol, timeout) =>
            local frame
            repeat
              num_received += 1
              frame = frames[num_received]
              if not frame?
                return nil, TIMEOUT
            until frame.protocol == protocol
            frame.sender, frame.message, frame.protocol

        received = with {}
          [] = { uplink\receive_from 3, TestPacket }

        $expect_that received, deep_eq
          * { 3, TestPacket 'message-3' }

  describe 'Packet', ->
    it 'survives roundtrip', ->
      original = TestPacket 'hello'

      correct_decode, ok = TestPacket::from original, TestPacket\protocol!
      $expect_that correct_decode, deep_eq {data: 'hello'}
      $expect_that ok, eq true

      incorrect_decode, ok = TestPacket2::from {protocol: ->}, TestPacket\protocol!
      $expect_that incorrect_decode, eq nil
      $expect_that ok, eq false

local *

import 'quicktype' as :declare_type, :F, :T
import 'spec' as :spec

declare_type 'StockpileBackend', [[{
  size: () => number,
  slot_capacity: (number) => number,
  slot_content: (number) => SlotInfo,
}]]
declare_type 'SlotInfo', [[{
  count: number,
  displayName: string,
}]]

declare_type 'Stockpile', [[{
  info: () => StockpileInfo,
}]]
export class Stockpile
  new: F '(?StockpileBackend) => <>', (@backend=MinecraftBackend!) =>

  info: F '() => [StockpileInfo]', =>
    stockpile_by_item = with {}
      for i = 1, @backend\size!
        slot = @backend\slot_content i
        if not slot?
          continue

        item = slot.displayName
        [item] ??= T 'StockpileInfo',
          :item
          stored: 0
          capacity: 0
        with [item]
          .capacity += @backend\slot_capacity i
          .stored += slot.count

    stockpile = [ info for _, info in pairs stockpile_by_item ]
    table.sort stockpile, (a, b) ->
      a.item < b.item
    stockpile

declare_type 'StockpileInfo', '[StoredItemInfo]'
declare_type 'StoredItemInfo', [[{
  item: string,
  stored: number,
  capacity: number,
}]]
class MinecraftBackend
  new: =>
    inventories = { peripheral.find 'inventory' }
    if #inventories == 0
      error 'cannot create Stockpile: no inventories attached'
    if #inventories > 1
      error 'cannot create Stockpile: too many inventories attached'
    { @inventory } = inventories

  size: F '() => number', =>
    @inventory\size!

  slot_content: F '(number) => number', (slot_id) =>
    @inventory\getItemDetail slot_id

  slot_capacity: F '(number) => SlotInfo', (slot_id) =>
    @inventory\getItemLimit slot_id


declare_type 'TestStockpileBackendOpts', [[{
  size: ?() => number,
  slot_content: ?(number) => SlotInfo,
  slot_capacity: ?(number) => number,
}]]
export class TestStockpileBackend
  new: F '(?TestStockpileBackendOpts) => <>', (opts={}) =>
    {
      :size=-> error 'size unimplemented'
      :slot_content=-> error 'slot_content unimplemented'
      :slot_capacity=-> error 'slot_capacity unimplemented'
    } = opts
    @size = F '() => number', size
    @slot_content = F '(number) => SlotInfo', slot_content
    @slot_capacity = F '(number) => number', slot_capacity

spec ->
  import 'spec_macros' as $

  import 'spec' as :describe, :it, :matchers

  import deep_eq, errors, matches from matchers

  describe 'Stockpile', ->
    describe '\\info', ->
      it 'returns correctly on valid inventory', ->
        item1 = 'Diamond Axe'
        item2 = 'Fishing Rod'
        stockpile = Stockpile TestStockpileBackend
          size: => 4
          slot_content: (slot_id) =>
            displayName = if slot_id % 2 == 1
              item1
            else
              item2
            {
              count: 16 * slot_id
              :displayName
            }
          slot_capacity: (slot_id) =>
            32 * slot_id

        info = stockpile\info!
        $expect_that info, deep_eq {{
          item: item1
          stored: 16 * (1 + 3)
          capacity: 32 * (1 + 3)
        }, {
          item: item2
          stored: 16 * (2 + 4)
          capacity: 32 * (2 + 4)
        }}

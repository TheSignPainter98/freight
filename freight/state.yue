local *

import 'quicktype' as :declare_type, :F, :T
import 'spec' as :spec

UNIMPLEMENTED = <call>: (...) ->

export class StateMachineBuilder
  new: =>
    @_states = T '{string -> table}', {}
    @_initial_state_name = T '?string', nil
    @_reporter = T '?(State) -> <>', nil

  set_initial_state: F '(string) => Self', (@_initial_state_name) => @

  set_reporter: F '((State) -> <>) => Self', (@_reporter) => @

  add_state: F '(StateSpec) => Self', (state) =>
    if @_states[state._name]?
      error "cannot build state machine: state '#{state._name}' redefined"
    @_states[state._name] = state
    @

  build: F '() => StateMachine', =>
    if not @_initial_state_name?
      error 'cannot build state machine: initial state undefined'
    if not @_states[@_initial_state_name]?
      error "cannot build state machine: initial state '#{@_initial_state_name}' undefined"
    if @_states[@_initial_state_name]._data_type != 'nil'
      error 'cannot build state machine: initial state has data present'

    -- TODO(kcza): validate!

    index = with {}
      .state = make_state @_initial_state_name, 'nil', nil

      states = @_states

      reporter = @_reporter
      .goto = F '(string, any) => <>', (name, data) =>
        if not states[@state.name]?._transitions[name]
          error "no such transition: #{@state.name} -> #{name}"
        new_state_spec = states[name]
        if not new_state_spec?
          error "internal error: no such state '#{name}'"
        .state = make_state name, new_state_spec._data_type, data
        if reporter?
          reporter .state

      initial_state_name = @_initial_state_name
      .to_graphviz = F '() => string', =>
        lines = with {}
          [] = 'digraph {'
          [] = '  bgcolor = black'
          [] = '  color = white'
          [] = '  node ['
          [] = '    color = white'
          [] = '    fontcolor = white'
          [] = '    fillcolor = white'
          [] = '  ]'
          [] = '  edge ['
          [] = '    color = white'
          [] = '    fontcolor = white'
          [] = '  ]'
          [] = '  levels=1'

          [] = "  #{initial_state_name}[shape=point]"
          for state_name, state in pairs states
            [] = ''

            if not state._data_type?
              [] = "  #{state_name}"
            else
              data_type_repr = state._data_type\gsub '\n *', ' '
              [] = "  #{state_name}[label=\"#{state_name}(#{data_type_repr})\"]"

            for other_state in pairs state._transitions
              [] = "  #{state_name} -> #{other_state}"

          [] = '}'
        table.concat lines, '\n'

    T 'StateMachine', {
      <index>: index,
      <newindex>: (key, v) =>
        error "cannot add field '#{key}' to state machine"
    }

make_state = F '(string, string, any) -> {}', (name, data_type, data) ->
  T data_type, data
  with :name, <>: {}
    if 'table' == type data
      .<index> = data
    else
      .<index> = value: data
    .<newindex> = (key) =>
      local key_repr
      if 'string' == type key
        key_repr = ".#{key}"
      else
        key_repr = "[#{key}]"
      error "cannot directly assign state fields"

declare_type 'StateSpec', [[{
  _transitions: {string},
  _data_type: ?string,
}]]
export class StateSpec
  new: F '(string) => <>', (@_name) =>
    if not valid_state_name @_name
      error "cannot build state machine: state name '#{@_name}' not a valid identifier"

    @_transitions = T '{string}', {}
    @_data_type = T 'string', 'nil'
    @_data_type_set = T 'boolean', false

  add_transition_to: F '(string) => <>', (name) =>
    if not valid_state_name name
      error "cannot build state machine: state name '#{name}' not a valid identifier"
    if @_transitions[name]?
      error "cannot build state machine: transition #{@_name}->#{name} redefined"
    @_transitions[name] = true

  set_data_type: F '(string) => <>', (data_type) =>
    if @_data_type_set
      error "cannot build state machine: data type for state #{@_name} already set"
    @_data_type_set = true
    @_data_type = data_type

declare_type 'StateMachine', [[{
  state: {name: string},
  goto: (string, ?{string -> any}) => <>,
}]]

valid_state_name = F '(string) -> boolean', (name) ->
  (name\match '^[a-z][a-z0-9-]+[a-z0-9]$')?

spec ->
  import 'spec_macros' as $

  import 'spec' as :describe, :it, :matchers

  import anything, deep_eq, eq, errors, matches, no_errors from matchers

  describe 'StateMachineBuilder', ->
    it 'requires initial state', ->
      $expect_that (-> StateMachineBuilder!\build!), errors matches "cannot build state machine: initial state undefined"

    it 'rejects invalid initial state', ->
      $expect_that (-> StateMachineBuilder!\set_initial_state('phantom')\build!), errors matches "cannot build state machine: initial state 'phantom' undefined"

    it 'rejects duplicate state names', ->
      $expect_that (-> StateMachineBuilder!
        \set_initial_state 'waiting'
        \add_state StateSpec 'waiting'
        \add_state StateSpec 'waiting'
        \build!), errors matches "cannot build state machine: state 'waiting' redefined"

    it 'rejects repeated \\set_data_type calls', ->
      $expect_that (-> StateMachineBuilder!
        \set_initial_state 'waiting'
        \add_state with StateSpec 'waiting'
          \set_data_type 'string'
          \set_data_type 'number'
        \build!), errors matches "cannot build state machine: data type for state waiting already set"

    it 'rejects invalid state names', ->
      $expect_that (-> StateMachineBuilder!
        \set_initial_state '-invalid'
        \add_state StateSpec '-invalid'
        \build!), errors matches "cannot build state machine: state name '%-invalid' not a valid identifier"

    it 'formats itself as graphviz', ->
      graphviz_repr = StateMachineBuilder!
        \set_initial_state 'state-1'
        \add_state with StateSpec 'state-1'
          \add_transition_to 'state-2'
        \add_state with StateSpec 'state-2'
          \add_transition_to 'state-1'
          \set_data_type [[{
            hello: string,
            world: number,
          }]]
        \build!
        \to_graphviz!
      must_contain =
        * 'digraph {'
        * 'state%-1 *%[shape=point%]'
        * 'state%-1 *%-> *state%-2'
        * 'state%-2 *%[label="state%-2%({ hello: string, world: number,? }%)"%]'
        * 'state%-2 *%-> *state%-1'
      for str in *must_contain
        $expect_that graphviz_repr, matches str

  describe 'valid_state_name', ->
    valid_idents =
      * 'hello'
      * 'world-123'
    for valid_ident in *valid_idents
      it "accepts '#{valid_ident}'", ->
        $expect_that (valid_state_name valid_ident), eq true

    invalid_idents =
      * ''
      * '1234'
      * '-qwer'
      * '.asdf'
      * 'a_b'
    for invalid_ident in *invalid_idents
      it "rejects '#{invalid_ident}'", ->
        $expect_that (valid_state_name invalid_ident), eq false

  describe 'StateMachine', ->
    make_test_sm = ->
      StateMachineBuilder!
        \set_initial_state 'state-1'
        \add_state with StateSpec 'state-1'
          \add_transition_to 'state-2'
          \add_transition_to 'state-3'
        \add_state with StateSpec 'state-2'
          \set_data_type [[{
            hello: string,
            world: number,
            optional: ?string,
          }]]
          \add_transition_to 'state-1'
        \add_state with StateSpec 'state-3'
          \set_data_type 'number'
        \build!

    it 'rejects new fields', ->
      test_sm = make_test_sm!
      $expect_that (-> test_sm.foo = 'bar'), errors matches [[cannot add field 'foo' to state machine]]

    describe '.state', ->
      it 'exposes table data at its toplevel', ->
        test_sm = make_test_sm!
        test_sm\goto 'state-2',
          hello: 'asdf'
          world: 4321
        $expect_that test_sm.state.hello, eq 'asdf'
        $expect_that test_sm.state.world, eq 4321

      it 'exposes non-table data in the .data field', ->
        test_sm = make_test_sm!
        test_sm\goto 'state-3', 123
        $expect_that test_sm.state.value, eq 123

      it 'rejects assignment', ->
        test_sm = make_test_sm!
        test_sm\goto 'state-2',
          hello: 'asdf'
          world: 4321
        $expect_that (-> test_sm.state.absent = 'foo'), errors matches 'cannot directly assign state fields'
        $expect_that (-> test_sm.state.hello = nil), errors matches 'cannot directly assign state fields'
        $expect_that (-> test_sm.state.hello = 'bar'), errors matches 'cannot directly assign state fields'

    describe '\\goto', ->
      it 'requires at least one argument', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto!), errors anything!

      it 'correctly transitions states', ->
        test_sm = make_test_sm!
        $expect_that test_sm.state.name, eq 'state-1'

        test_sm\goto 'state-2',
          hello: 'asdf'
          world: 4321
        $expect_that test_sm.state.name, eq 'state-2'
        $expect_that test_sm.state.hello, eq 'asdf'
        $expect_that test_sm.state.world, eq 4321
        $expect_that test_sm.state.optional, eq nil

        test_sm\goto 'state-1'
        $expect_that test_sm.state.name, eq 'state-1'
        $expect_that test_sm.state.hello, eq nil
        $expect_that test_sm.state.world, eq nil
        $expect_that test_sm.state.optional, eq nil

      it 'rejects invalid transitions', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'invalid'), errors matches 'no such transition: state%-1 %-> invalid'

        test_sm\goto 'state-3', 123
        $expect_that (-> test_sm\goto 'state-1'), errors matches 'no such transition: state%-3 %-> state%-1'

      it 'rejects transitions with missing data', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'state-2'), errors matches 'incorrect type: expected table but got nil'
        $expect_that (-> test_sm\goto 'state-2', hello: 'asdf'), errors matches 'incorrect type: expected number but got nil'
        $expect_that (-> test_sm\goto 'state-2', world: 123), errors matches 'incorrect type: expected string but got nil'

      it 'validates state fields', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'state-2', hello: 'asdf', world: 'fdsa'), errors matches 'incorrect type: expected number but got string'

      it 'rejects extra state fields', ->
        test_sm = make_test_sm!
        $expect_that (-> test_sm\goto 'state-3', spare: 'spare'), errors matches 'incorrect type'

  describe 'set_reporter', ->
    it 'is respected by state machines', ->
      states = {}
      test_sm = StateMachineBuilder!
        \set_initial_state 'state-1'
        \set_reporter (state) ->
          states[] = state
        \add_state with StateSpec 'state-1'
          \add_transition_to 'state-2'
        \add_state with StateSpec 'state-2'
          \add_transition_to 'state-1'
          \set_data_type [[{
            hello: string,
            world: number
          }]]
        \build!

      data =
        hello: 'asdf'
        world: 123

      test_sm\goto 'state-2', data

      $expect_that states, deep_eq
        * { name: 'state-2', ...data }

      test_sm\goto 'state-1'
      test_sm\goto 'state-2', data
      test_sm\goto 'state-1'
      test_sm\goto 'state-2', data

      $expect_that [ state for state in *states ], deep_eq
        * { name: 'state-2', ...data }
        * { name: 'state-1' }
        * { name: 'state-2', ...data }
        * { name: 'state-1' }
        * { name: 'state-2', ...data }

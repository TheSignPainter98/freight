local *

import 'quicktype' as :F
import 'spec' as :spec

export pick = F '([some]) -> any', (options) ->
  if #options == 0
    return nil
  options[math.random #options]

export shuffle = F '([some]) -> <>', (list) ->
  n = #list
  for i = 1, n
    new_index = math.random n
    list[i], list[new_index] = list[new_index], list[i]

spec ->
  import 'spec_macros' as $

  import 'spec' as :describe, :it, :matchers

  import contains_value, eq, gt from matchers

  describe 'pick', ->
    it 'returns nil on empty input', ->
      $expect_that (pick {}), eq nil

    it 'selects a present element', ->
      $expect_that (pick {'a'}), eq 'a'

    it 'selects different elements', ->
      elems = [ tostring i for i = 1, 100 ]
      seen = {}
      unique_elems = {}
      for i = 1, #elems
        elem = pick elems
        if not seen[elem]
          unique_elems[] = elem
        seen[elem] = true

      $expect_that #unique_elems, gt 1

  describe 'shuffle', ->
    it 'retains all elements', ->
      elems = {'a', 'b', 'c', 'd'}
      elems2 = { ...elems }
      shuffle elems2
      for elem in *elems
        $expect_that elems2, contains_value eq elem

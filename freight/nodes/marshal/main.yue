local *

import 'compat' as :HOST
import 'freight.data.multiplexer' as :Multiplexer
import 'freight.logger' as :log
import 'freight.nodes.factory.main' as :FactoryHeartbeat, :ScheduleRequest, :ScheduleResponse
import 'freight.nodes.marshal.pseudo_random' as :PseudoRandom
import 'freight.nodes.marshal.scheduler' as :Scheduler
import 'freight.nodes.marshal.symmetric_difference' as :symmetric_difference
import 'freight.peripheral.uplink' as :IdempotenceToken, :TestUplinkBackend, :TIMEOUT, :Uplink
import 'freight.state' as :StateMachineBuilder, :StateSpec
import 'freight.toml' as :toml_parse
import 'freight.upgrade.listener' as :UpgradeListener
import 'quicktype' as :declare_type, :F, :T
import 'spec' as :spec

export default_config = -> [=[
[marshal]
]=]

export main = F '(MarshalConfig) -> <>', (config) ->
  log -> 'starting marshal'

  state = nil
  with? io.open '.freight-state.toml'
    state = toml_parse assert \read '*a'
    assert \close!

  uplink = Uplink!
  upgrade_listener = UpgradeListener config, uplink
  with Marshal config, uplink, upgrade_listener
    \run!

STEP_INTERVAL = 60

declare_type 'Network', [[{
  name: string,
  factories: [Factory],
}]]
declare_type 'Factory', [[{
  -- Constant
  name: string,
  pc_id: number,
  -- Variable
  last_seen_epoch: number,
  stations: DetectedStations,
  stockpile: DetectedStockpile,
}]]
declare_type 'TrainStatus', [[{
  -- Constant:
  name: string,
  -- Variable:
  last_seen_epoch: number,
  last_seen_at_factory: string,
  last_seen_at_station: string,
}]]

declare_type 'Train', [[{
  name: string,
  state: StateMachine,
}]]

declare_type 'MarshalConfig', [[{
  marshal: {},
}]]
declare_type 'MarshalEventType', [[
  "new-epoch"
  |"network-message"
]]
declare_type 'StationAddress', [[{
  factory: Factory,
  station: StationConfig,
}]]
declare_type 'DeliveryOptionSet', [[{
  inbound_station: StationAddress,
  outbound_stations: [StationAddress],
  trains: [AvailableTrain],
}]]
declare_type 'DeliveryOption', [[{
  inbound_station: string,
  outbound_station: string,
  train: AvailableTrain,
}]]
declare_type 'AvailableTrain', [[{
  at_factory: {
    name: string,
    pc_id: number,
  },
  at_station: {
    name: string,
  },
  name: string,
}]]
class Marshal
  new: F '(MarshalConfig, Uplink, UpgradeListener) => <>', (@config, @uplink, @upgrade_listener) =>
    @epoch = T 'number', 0
    -- TODO(kcza): load from stored initial state
    @factories = T '{string->Factory}', {}
    @trains = T '{string->TrainStatus}', {}
    @rand = PseudoRandom!
    @scheduler = Scheduler @rand

    @do_count_epochs = T 'boolean', true
    @throttle = T 'boolean', HOST == 'minecraft'

    @events = T 'Multiplexer', with Multiplexer '{type: MarshalEventType}'
      \add @\count_epochs
      \add @\listen_to_network

  @state_machine: F '() => StateMachine', =>
    StateMachineBuilder!
      \set_initial_state 'initing'
      \add_state with StateSpec 'initing'
        \add_transition_to 'waiting'
      \add_state with StateSpec 'waiting'
        \add_field 'networks', '{string->Network}'
        \add_field 'trains', '{string->Train}'
        \add_field 'station_networks', '{string->string}'
        \add_field 'factory_names', '{string}'
      \build!

  run: F '(?StateMachine) => !', (state=@@state_machine!) =>
    parallel.waitForAny @upgrade_listener\listen,
      @\handle_events

  count_epochs: F '() => !', (initial_epoch=1)=>
    EPOCH_PERIOD = 10
    epoch = initial_epoch
    while true
      if @do_count_epochs
        @send_new_epoch_event epoch
        epoch += 1
        os.sleep EPOCH_PERIOD
      else
        coroutine.yield!

  send_new_epoch_event: F '(number) => <>', (epoch) =>
    @events\send type: 'new-epoch', :epoch
    return

  listen_to_network: F '() => !', =>
    while true
      @read_network!

  read_network: F '() => <>', =>
    _, message = @uplink\receive_from_any!
    switch message\protocol!
      when 'FactoryHeartbeat'
        @events\send type: 'network-message', :message
      else
        log -> "ignoring #{message\protocol!} message"
    return

  handle_events: F '() => !', =>
    yield_misc_events = coroutine.running!?
    for event in @events\stream!
      if yield_misc_events and 'table' != type event
        coroutine.yield event
        continue

      @handle_event event
      if @throttle
        os.sleep 0.001 -- Avoid CPU-hogging.

  handle_event: F '({type: MarshalEventType}) => <>', (event) =>
    with event
      switch .type
        when 'new-epoch'
          @on_new_epoch .epoch
        when 'network-message'
          @on_network_message .message
        else
          error "internal error: unrecognised multiplexer event type '#{.type}'"
    return

  on_new_epoch: F '(number) => <>', (epoch) =>
    @epoch = epoch
    @prune_factories!
    @prune_trains!
    return

  prune_factories: F '() => <>', =>
    LIFETIME_EPOCHS = 1
    @factories = T '{string->Factory}', @prune_statuses @factories, LIFETIME_EPOCHS

  prune_trains: F '() => <>', =>
    LIFETIME_EPOCHS = 10
    @trains = T '{string->TrainStatus}', @prune_statuses @trains, LIFETIME_EPOCHS

  prune_statuses: F '({string->{last_seen_epoch: number}}, number) => {string->{}}', (statuses, lifetime_epochs) =>
    death_horizon_epoch = @epoch - lifetime_epochs
    with {}
      for name, status in pairs statuses
        if status.last_seen_epoch < death_horizon_epoch
          continue -- Prune
        [name] = status

  on_network_message: F '(Packet) => <>', (message) =>
    switch message\protocol!
      when 'FactoryHeartbeat'
        @on_factory_heartbeat message
      else
        error "internal error: unexpected network message protocol reached marshal core '#{message\protocol!}'"

  on_factory_heartbeat: F '(FactoryHeartbeat) => <>', (heartbeat) =>
    factory = @update_system_state heartbeat
    @manage_resources factory

  update_system_state: F '(FactoryHeartbeat) => Factory', (heartbeat) =>
    { :pc_id, :name, :stations, :stockpile } = heartbeat

    factory_status = @factories[name]
    seen_before = factory_status?
    @factories[name] = T 'Factory', with factory_status ?? :name, :pc_id
      if seen_before and pc_id != .pc_id
        log -> "temporarily ignoring possible imposter for factory #{name}: last known PC was ##{.pc_id}, got #{pc_id}"
        return

      .last_seen_epoch = @epoch
      .stations = stations
      .present_trains = present_trains
      .stockpile = stockpile

    for station in *stations.known
      for present_train in *station.present_trains
        @declare_train_seen present_train, name, station.name
    for station in *stations.unknown
      for present_train in *station.present_trains
        @declare_train_seen present_train, name, station.name

    @factories[name]

  declare_train_seen: F '(string, string, string) => <>', (train_name, factory_name, station_name) =>
    @trains[train_name] = T 'TrainStatus', with @trains[train_name] ?? name: train_name
      .last_seen_epoch = @epoch
      .last_seen_at_factory = factory_name
      .last_seen_at_station = station_name

  manage_resources: F '(Factory) => <>', (factory) =>
    low_resources = @get_low_resources factory.stockpile
    if not low_resources?
      return

    for resource in *low_resources
      @manage_low_resource resource, factory

  get_low_resources: F '(DetectedStockpile) => ?[string]', (stockpile) =>
    low_resources = nil
    for resource in *stockpile.known
      with resource
        if not .shortage_amount?
          continue
        if .stored >= .shortage_amount
          continue

        if not low_resources?
          low_resources = {}
        low_resources[] = .name
    low_resources

  manage_low_resource: F '(string, Factory) => <>', (resource, factory) =>
    MAX_ATTEMPTS = 25

    candidates_co = @scheduler\schedule_candidates resource, factory, @factories
    for _ = 1, MAX_ATTEMPTS
      candidate = do
        ok, yielded = coroutine.resume candidates_co
        if not ok
          error yielded
        if not yielded?
          os.sleep 0.01 -- Throttle
        yielded

      {
        train_addr: {
          factory: {
            name: factory_name,
            pc_id: factory_pc_id,
          },
          station: {
            name: station_name,
          },
          name: train_name,
        },
        :schedule,
      } = candidate

      idemp_tok = IdempotenceToken!
      @uplink\send_to factory_pc_id, ScheduleRequest idemp_tok, station_name, train_name, schedule

      _, response = @uplink\receive_from factory_pc_id, ScheduleResponse, timeout: 1
      if response == TIMEOUT
        continue
      if response.idemp_tok != idemp_tok
        continue
      if error_reason = response.error_reason
        log -> "cannot schedule train at #{factory_name}:#{station_name}: #{error_reason}"

    print "no trains available to take #{resource} to #{factory.name}, will re-attempt next heartbeat"

  ut_stop_counting_epochs: F '() => <>', =>
    @do_count_epochs = false

  ut_step: F '() => <>', =>
    @handle_event @events\next!

  ut_epoch: F '() => number', => @epoch

  ut_set_epoch: F '(number) => <>', (epoch) =>
    @epoch = epoch
    @send_new_epoch_event epoch

  ut_factories: F '() => {string->Factory}', => @factories

  ut_trains: F '() => {string->TrainStatus}', => @trains

spec ->
  import 'spec_macros' as $

  import 'spec' as :describe, :it, :matchers

  import deep_eq, eq, has_fields, len, lt from matchers

  describe 'Marshal', ->
    describe '\\on_new_epoch', ->
      it 'prunes lost factories', ->
        test_phase = 'add-factories'
        stockpile =
          known:
            * name: 'minecraft:dirt'
              stored: 64
              shortage_amount: 32
          unknown:
            * name: 'minecraft:wood_sword'
              stored: 1
          estimated_capacity: 64

        config =
          marshal:
            network: 'mainline'
        uplink = Uplink TestUplinkBackend
          receive: (_, _) =>
            @count ??= 0
            if test_phase != @last_test_phase
              @count = 0
            @last_test_phase = test_phase

            if @count < 10
              @count += 1
              stations = T 'DetectedStations', switch test_phase
                when 'add-factories'
                  known =
                    * name: "station_#{3*@count}"
                      network: 'network_1'
                      type: 'outbound'
                      handles: 'dirt'
                      present_trains: {}
                    * name: "station_#{3*@count+1}"
                      network: 'network_2'
                      type: 'inbound'
                      handles: 'dirt'
                      present_trains: {}
                  :known, unknown: {}
                when 'change-factory-stations'
                  known =
                    * name: "station_#{3*@count}"
                      network: 'network_1'
                      type: 'outbound'
                      handles: 'dirt'
                      present_trains: {}
                    * name: "station_#{3*@count+2}"
                      network: 'network_3'
                      type: 'inbound'
                      handles: 'dirt'
                      present_trains: {}
                  :known, unknown: {}
                else
                  error "internal error: unrecognised test phase #{test_phase}"
              message = FactoryHeartbeat @count, "factory_#{@count}", stations, stockpile
              return @count, message, FactoryHeartbeat\protocol!
            else
              return nil, nil, nil
        upgrade_listener = UpgradeListener config, uplink

        with Marshal config, uplink, upgrade_listener
          \ut_stop_counting_epochs!
          EXPECTED_FACTORIES = 4
          for i = 1, EXPECTED_FACTORIES
            \ut_step!

          epoch = \ut_epoch!
          $assert_that \ut_factories!, has_fields
            factory_1: has_fields
              name: eq 'factory_1'
              pc_id: eq 1
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq 'station_3'
                  * has_fields name: eq 'station_4'
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_2: has_fields
              name: eq 'factory_2'
              pc_id: eq 2
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_6"
                  * has_fields name: eq "station_7"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_3: has_fields
              name: eq 'factory_3'
              pc_id: eq 3
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_9"
                  * has_fields name: eq "station_10"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_4: has_fields
              name: eq 'factory_4'
              pc_id: eq 4
              last_seen_epoch: eq epoch
              stations: has_fields {}
                known: has_fields
                  * has_fields name: eq "station_12"
                  * has_fields name: eq "station_13"
                unknown: len eq 0
              stockpile: deep_eq stockpile

          test_phase = 'change-factory-stations'
          for i = 1, EXPECTED_FACTORIES
            \ut_step!

          $assert_that \ut_factories!, has_fields
            factory_1: has_fields
              name: eq 'factory_1'
              pc_id: eq 1
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_3"
                  * has_fields name: eq "station_5"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_2: has_fields
              name: eq 'factory_2'
              pc_id: eq 2
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_6"
                  * has_fields name: eq "station_8"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_3: has_fields
              name: eq 'factory_3'
              pc_id: eq 3
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_9"
                  * has_fields name: eq "station_11"
                unknown: len eq 0
              stockpile: deep_eq stockpile
            factory_4: has_fields
              name: eq 'factory_4'
              pc_id: eq 4
              last_seen_epoch: eq epoch
              stations: has_fields
                known: has_fields
                  * has_fields name: eq "station_12"
                  * has_fields name: eq "station_14"
                unknown: len eq 0
              stockpile: deep_eq stockpile

          test_phase = 'global-disconnect'
          \ut_set_epoch 10
          \ut_step!

          $expect_that \ut_factories!, deep_eq {}

      -- it 'prunes lost trains', ->
      --   config =
      --     marshal:
      --       network: 'mainline'
      --   uplink = Uplink TestUplinkBackend
      --     receive: (_, _) =>
      --       @count ??= 0
      --       @count += 1
      --       stations =
      --         * 'station_1'
      --         * 'station_2'
      --       trains =
      --         station_1: 'train_1'
      --         station_2: 'train_2'
      --       stockpile_info =
      --         * name: '<minecraft:dirt>'
      --           stored: 64
      --           capacity: 64
      --       message = FactoryHeartbeat @count, "factory_#{@count}", stations, trains, stockpile_info
      --       @count, message, FactoryHeartbeat\protocol!
      --   upgrade_listener = UpgradeListener config, uplink
      --
      --   print 'starting marshal'
      --   with Marshal config, uplink, upgrade_listener
      --     \ut_stop_counting_epochs!
      --     \ut_step!
      --     print 'step1'
      --
      --     epoch = \ut_epoch!
      --     $expect_that \ut_trains!, has_fields
      --       train_1: has_fields
      --         name: eq 'train_1'
      --         last_seen_epoch: eq epoch
      --         last_seen_at_factory: eq 'factory_1'
      --         last_seen_at_station: eq 'station_1'
      --       train_2: has_fields
      --         name: eq 'train_2'
      --         last_seen_epoch: eq epoch
      --         last_seen_at_factory: eq 'factory_1'
      --         last_seen_at_station: eq 'station_2'
      --
      --     print 10
      --     \ut_set_epoch 10
      --     \ut_step!
      --     \ut_step!
      --     \ut_step!
      --
      --     $expect_that \ut_trains!, deep_eq {}

    it 'respects the scheduler', ->
      -- TODO(kcza): test valid schedules are made
      --  - Ensure correct network
      --  - Ensure correct resource handling
      --  - Ensure correct in/outbound handling
      --  - MAYBE Run many times, shim `pick` to ensure progression

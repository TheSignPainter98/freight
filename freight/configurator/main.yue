local *

local MarshalIdentityRequest
local MarshalIdentityResponse
local FactoryPcRequest
local FactoryPcResponse
local GetConfigRequest
local GetConfigResponse
local SetConfigRequest
local SetConfigResponse

import 'freight.configurator.editor' as :Editor, :TestEditorBackend
import 'freight.pc' as :Pc
import 'freight.peripheral.uplink' as :IdempotenceToken, :Packet, :TIMEOUT, :Uplink
import 'quicktype' as :declare_type, :F, :is, :T
import 'spec' as :spec

export class Configurator
  new: F '(?Pc, ?Uplink, ?Editor) => <>', (@pc=Pc!, @uplink=Uplink!, @editor=Editor!) =>

  configure_marshal: F '() => ?string', =>
    marshal_config, err = @get_marshal_config!
    if err != nil
      return err
    validator = (raw) ->
      local config, err
      try
        config = parse_toml raw
      catch err2
        err = err2
      if err?
        print err
        return false

      ok, err = is 'MarshalConfig', new_config
      if err?
        print err
      ok
    marshal_config, err = @editor\edit_text marshal_config, "marshal's freight.toml", validator, (_) ->
    error 'todo' .. tostring err
    nil

  get_marshal_config: F '() => <?string, ?string>', =>
    MAX_ATTEMPTS = 3
    for i = 1, MAX_ATTEMPTS
      if i > 1
        print "getting config... (attempt #{i}/#{MAX_ATTEMPTS})"

      idemp_tok = IdempotenceToken!
      @uplink\broadcast MarshalIdentityRequest idemp_tok, @pc\id!
      _, resp = @uplink\receive_from_any MarshalIdentityResponse, timeout: 5
      if resp != TIMEOUT
        return resp, nil

    nil, "cannot find marshal after #{MAX_ATTEMPTS} attempts"

  configure_factory: F '(string) -> <>', (factory_name) =>
    error 'todo'

  @expected_instance_types: T '{string->string}',
    marshal: 'MarshalConfig'
    factory: 'FactoryConfig'
  @config_checker: F '(string) => (string) -> boolean', (instance_type) =>
    expected_type = @expected_instance_types[instance_type]
    if not expected_type?
      error "internal error: unknown instance type #{instance_type}"

    F '(string) -> boolean', (text) ->
      local config, err
      try
        config = parse_toml raw
      catch err2
        err = err2
      if err?
        print err
        return false
      true

declare_type 'MarshalIdentityRequest', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
}]]
export class MarshalIdentityRequest extends Packet
  new: F '(IdempotenceToken, number) => <>', (@idemp_tok, @pc_id) =>

export class MarshalIdentityResponse extends Packet
  new: F '(IdempotenceToken, number) => <>', (@idemp_tok, @pc_id) =>

declare_type 'FactoryPcRequest', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
  name: string,
}]]
export class FactoryPcRequest extends Packet
  new: F '(IdempotenceToken, number, string) => <>', (@idemp_tok, @pc_id, @name) =>

export class FactoryPcResponse extends Packet
  new: F '(IdempotenceToken, number|string) => <>', (@idemp_tok, @resp) =>

declare_type 'GetConfigRequest', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
}]]
export class GetConfigRequest extends Packet
  new: F '(IdempotenceToken, number) => <>', (@idemp_tok, @pc_id) =>

export class GetConfigResponse extends Packet
  new: F '(IdempotenceToken, ?string) => <>', (@idemp_tok, @raw) =>

declare_type 'SetConfigRequest', [[{
  idemp_tok: IdempotenceToken,
  pc_id: number,
  raw: string,
}]]
export class SetConfigRequest extends Packet
  new: F '(IdempotenceToken, number, string) => <>', (@idemp_tok, @pc_id, @raw) =>

export class SetConfigResponse extends Packet
  new: F '(IdempotenceToken, ?string) => <>', (@idemp_tok, @error_reason) =>

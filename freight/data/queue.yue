local *

import declare_type, F from require 'quicktype'
import spec from require 'spec'

declare_type 'Queue', [[{
  len: () => number,
  enqueue: (any) => <>,
  dequeue: () => ?any,
  peek: () => ?any,
  iter: () => function,
}]]
export class Queue
  new: =>
    @entries = {}
    @front = 1
    @back = 1

  len: F '() => number', =>
    @back - @front

  enqueue: F '(any) => <>', (elem) =>
    @entries[@back] = elem
    @back += 1

  dequeue: F '() => ?any', =>
    with? @entries[@front]
      @entries[@front] = nil
      @front += 1

  peek: F '() => ?any', =>
    @entries[@front]

  iter: =>
    coroutine.wrap ->
      i = @front
      while i != @back
        coroutine.yield @entries[i]
        i += 1

spec ->
  import 'spec_macros' as $
  import describe, it, matchers from require 'spec'
  import contains, deep_eq, eq from matchers

  describe 'Queue', ->
    it 'dequeues nil on empty', ->
      with Queue!
        $expect_that \dequeue!, eq nil

    it 'dequeues in the right order', ->
      with Queue!
        $expect_that \len!, eq 0
        \enqueue 'one'
        \enqueue 'two'
        \enqueue 'three'
        $expect_that \len!, eq 3
        $expect_that \dequeue!, eq 'one'
        $expect_that \dequeue!, eq 'two'
        $expect_that \dequeue!, eq 'three'
        $expect_that \dequeue!, eq nil
        $expect_that \len!, eq 0
        \enqueue 'four'
        \enqueue 'five'
        $expect_that \len!, eq 2
        $expect_that \dequeue!, eq 'four'
        $expect_that \dequeue!, eq 'five'

    describe '\\iter', ->
      with Queue!
        \enqueue 'one'
        \enqueue 'two'
        \enqueue 'three'

        $expect_that [ entry for entry in \iter! ], deep_eq
          * 'one'
          * 'two'
          * 'three'

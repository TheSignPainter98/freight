local *
local StockpileRequest
local StockpileResponse
local ScheduleRequest
local ScheduleResponse
local InfoRequest
local InfoResponse
local FactoryHeartbeat
local TrainsPresent

import log from require 'freight.logger'
import Station from require 'freight.peripheral.station'
import Stockpile from require 'freight.peripheral.stockpile'
import IdempotenceToken, Packet, Uplink from require 'freight.peripheral.uplink'
import Pc from require 'freight.pc'
import declare_type, F, T from require 'quicktype'
import spec from require 'spec'

export default_config = [=[
[factory]
name = '<factory-name>'
network = 'mainline'

[[stations]]
name = 'station-1'
role = 'requester' # or 'supplier'
handles = '<resource-id>'
]=]

export main = F '(FactoryConfig) -> <>', (config) ->
  print 'starting factory'
  with Factory config, {Station!}, Stockpile!, Uplink!
    \run!

declare_type 'FactoryConfig', [[{
  factory: {
    name: string,
    network: string,
  },
  stations: [{
    name: string,
    role: "requester"|"supplier",
    handles: string,
  }],
}]]
class Factory
  new: F '(FactoryConfig, Pc, [Station], Stockpile, Uplink) => <>', (@config, @pc, @stations, @stockpile, @uplink) =>
    name = @name!
    if @pc\name! != name
      @pc\set_name name
    @present_trains = T '[string]', {}

  name: F '() => string', =>
    @config.factory.name

  run: F '() => !', =>
    @do_train_detection_step!
    @do_heartbeat_step!
    parallel.waitForAny @\run_steps,
      @\run_heartbeats,
      @\run_train_detection
      -- TODO(kcza): detect marshal ID, messages sent to nil marshal shall be ignored

  run_steps: F '() => !', =>
    while true
      @do_network_step!

  do_network_step: F '() => <>', =>
    from_id, message = @uplink\receive_from_any!
    if not from_id?
      return

    switch message\protocol!
      when 'StockpileRequest'
        @on_stockpile_request from_id, message
      when 'ScheduleRequest'
        @on_schedule_request from_id, message
      when 'InfoRequest'
        @on_info_request from_id, message
      else
        log -> "ignoring #{message\protocol!} message"

  on_stockpile_request: F '(number, Packet) => <>', (requester, request) =>
    log -> 'handling stockpile request'

    info = @stockpile\info!
    @uplink\send_to requester, StockpileResponse request.idemp_tok, info

  on_schedule_request: F '(number, Packet) => <>', (requester, request) =>
    log -> 'handling schedule request'

    { :idemp_tok, :station_name, :schedule } = request
    station = @get_station station_name
    if not station?
      @uplink\send_to requester, ScheduleResponse idemp_tok, "no such station: #{station_name} at #{@name!}"
      return

    station\apply_schedule schedule
    @uplink\send_to requester, ScheduleResponse idemp_tok, nil

  get_station: F '(string) => ?Station', (name) =>
    for station in *@stations
      if station\name! == name
        return station
    nil

  on_info_request: F '(number, Packet) => <>', (requester, request) =>
    log -> 'handling info request'

    stockpile_info = @stockpile\info!
    station_infos = [ station\info! for station in *@stations ]
    response = InfoResponse request.idemp_tok, @name!, station_infos, stockpile_info
    @uplink\send_to requester, response

  run_heartbeats: F '() => !', =>
    HEARTBEAT_PERIOD = 10
    while true
      @do_heartbeat_step!
      os.sleep HEARTBEAT_PERIOD

  do_heartbeat_step: F '() => <>', =>
    station_names = [ station\name! for station in *@stations ]
    present_trains = @detect_trains!
    @uplink\broadcast FactoryHeartbeat @pc\id!, @name!, station_names, present_trains

  detect_trains: F '() => {string->string}', =>
    with {}
      for station in *@stations
        name = station\train_name!
        if not name?
          continue
        [station\name!] = name

export class StockpileRequest extends Packet
  new: F '(IdempotenceToken) => <>', (@idemp_tok) =>

export class StockpileResponse extends Packet
  new: F '(IdempotenceToken, StockpileInfo) => <>', (@idemp_tok, @info) =>

export class ScheduleRequest extends Packet
  new: F '(IdempotenceToken, string, Schedule) => <>', (@idemp_tok, @station_name, @schedule) =>

export class ScheduleResponse extends Packet
  new: F '(IdempotenceToken, ?string) => <>', (@idemp_tok, @error_reason) =>

export class InfoRequest extends Packet
  new: F '(IdempotenceToken) => <>', (@idemp_tok) =>

export class InfoResponse extends Packet
  new: F '(IdempotenceToken, string, [StationInfo], StockpileInfo) => <>', (@idemp_tok, @name, @station_infos, @stockpile_info) =>

declare_type 'FactoryHeartbeat', [[{
  pc_id: number,
  name: string,
  station_names: [string],
  present_trains: {string->string},
}]]
export class FactoryHeartbeat extends Packet
  new: F '(number, string, [string], {string->string}) => <>', (@pc_id, @name, @station_names, @present_trains) =>

spec ->
  import 'spec_macros' as $
  import TestStationBackend from require 'freight.peripheral.station'
  import TestStockpileBackend from require 'freight.peripheral.stockpile'
  import TestUplinkBackend from require 'freight.peripheral.uplink'
  import TestPcBackend from require 'freight.pc'
  import describe, it, matchers from require 'spec'
  import deep_eq, eq, has_fields, len from matchers

  describe 'Factory', ->
    it 'resolves label and name mismatches', ->
      CONFIG_NAME = 'config-name'
      PC_NAME = 'pc-name'
      new_name = nil

      config =
        factory:
          name: CONFIG_NAME
          network: 'mainline'
        stations: {}
      pc = Pc TestPcBackend
        name: => PC_NAME
        set_name: (name) =>
          new_name = name
      stations = {}
      stockpile = Stockpile TestStockpileBackend!
      uplink = Uplink TestUplinkBackend!

      Factory config, pc, stations, stockpile, uplink

      $expect_that new_name, eq CONFIG_NAME

    it 'responds to stockpile requests', ->
      sent = {}
      SERVER_ID = 12345
      idemp_tok = IdempotenceToken!

      PC_ID = 54321
      PC_NAME = 'test-pc-name'
      config =
        factory:
          name: PC_NAME
          network: 'mainline'
        stations: {}
      stations =
        * Station TestStationBackend!
      pc = Pc TestPcBackend
        id: => PC_ID
        name: => PC_NAME
      stockpile = Stockpile TestStockpileBackend
        size: => 1
        slot_content: (i) =>
          $assert_that i, eq 1
          count: 32, displayName: 'Stone Bricks'
        slot_capacity: (i) =>
          $assert_that i, eq 1
          64
      uplink = Uplink TestUplinkBackend
        receive: (_, _) =>
          @count ??= 1
          if @count == 1
            @count += 1
            return SERVER_ID, (StockpileRequest idemp_tok), StockpileRequest\protocol!
          nil, nil, nil
        send: (recipient, message, protocol) =>
          sent[] = :recipient, :message, :protocol
          true
      factory = Factory config, pc, stations, stockpile, uplink

      for _ = 1, 10
        factory\do_network_step!

      $expect_that sent, len eq 1
      $expect_that sent[1], has_fields
        recipient: eq SERVER_ID
        message: has_fields
          idemp_tok: eq idemp_tok
          info: has_fields
            item: eq 'Stone Bricks'
            stored: eq 32
            capacity: eq 64
        protocol: eq StockpileResponse\protocol!

    it 'responds to valid schedule requests', ->
      sent = {}
      SERVER_ID = 12345
      idemp_tok = IdempotenceToken!
      applied_schedules = {}

      STATION_NAME = 'test-station-name'
      schedule =
        cyclic: false
        entries:
          * instruction:
              id: 'create:destination'
              data: text: STATION_NAME
            conditions: {}

      PC_NAME = 'test-factory-name'
      config =
        factory:
          name: PC_NAME
          network: 'mainline'
        stations: {}
      pc = Pc TestPcBackend
        id: => PC_ID
        name: => PC_NAME
      stations =
        * Station TestStationBackend
          name: => STATION_NAME
          train_set_schedule: (schedule) =>
            applied_schedules[] = schedule
            true
      stockpile = Stockpile TestStockpileBackend!
      uplink = Uplink TestUplinkBackend
        send: (recipient, message, protocol) =>
          sent[] = :recipient, :message, :protocol
          true
        receive: (_, _) =>
          @count ??= 1
          if @count <= 1
            @count += 1
            SERVER_ID, (ScheduleRequest idemp_tok, STATION_NAME, schedule), ScheduleRequest\protocol!
          else
            nil, nil, nil
      factory = Factory config, pc, stations, stockpile, uplink

      for _ = 1, 10
        factory\do_network_step!

      $expect_that sent, deep_eq
        * recipient: SERVER_ID
          protocol: ScheduleResponse\protocol!
          message: ScheduleResponse idemp_tok, nil
      $expect_that applied_schedules, len eq 1
      $expect_that applied_schedules, deep_eq {schedule}

    it 'responds to invalid schedule requests', ->
      sent = {}
      SERVER_ID = 12345
      idemp_tok = IdempotenceToken!
      applied_schedules = {}

      STATION_NAME = 'test-station-name'
      schedule =
        cyclic: false
        entries:
          * instruction:
              id: 'create:destination'
              data: text: STATION_NAME
            conditions: {}

      FACTORY_NAME = 'test-factory-name'
      config =
        factory:
          name: FACTORY_NAME
          network: 'mainline'
        stations: {}
      pc = Pc TestPcBackend
        id: => PC_ID
        name: => FACTORY_NAME
      stations = {}
      stockpile = Stockpile TestStockpileBackend!
      uplink = Uplink TestUplinkBackend
        send: (recipient, message, protocol) =>
          sent[] = :recipient, :message, :protocol
          true
        receive: (_, _) =>
          @count ??= 1
          if @count <= 1
            @count += 1
            SERVER_ID, (ScheduleRequest idemp_tok, STATION_NAME, schedule), ScheduleRequest\protocol!
          else
            nil, nil, nil
      factory = Factory config, pc, stations, stockpile, uplink

      for _ = 1, 10
        factory\do_network_step!

      $expect_that sent, deep_eq
        * recipient: SERVER_ID
          protocol: ScheduleResponse\protocol!
          message: ScheduleResponse idemp_tok, "no such station: #{STATION_NAME} at #{FACTORY_NAME}"
      $expect_that applied_schedules, deep_eq {}

    it 'responds to info requests', ->
      sent = {}
      SERVER_ID = 12345
      idemp_tok = IdempotenceToken!

      PC_NAME = 'test-factory-name'
      config =
        factory:
          name: PC_NAME
          network: 'mainline'
        stations: {}
      pc = Pc TestPcBackend
        id: => PC_ID
        name: => PC_NAME
      stations =
        * Station TestStationBackend
            name: => 'test-station-name'
            train_name: =>
              @count ??= 1
              if @count == 1
                @count += 1
                'test-train-name'
              else
                nil
      stockpile = Stockpile TestStockpileBackend
        size: => 1
        slot_content: (i) =>
          $assert_that i, eq 1
          count: 32, displayName: 'Stone Bricks'
        slot_capacity: (i) =>
          $assert_that i, eq 1
          64
      uplink = Uplink TestUplinkBackend
        receive: (_, _) =>
          @count ??= 1
          if @count <= 2
            @count += 1
            SERVER_ID, (InfoRequest idemp_tok), InfoRequest\protocol!
          else
            nil, nil, nil
        send: (recipient, message, protocol) =>
          sent[] = :recipient, :message, :protocol
          true
      factory = Factory config, pc, stations, stockpile, uplink

      for _ = 1, 10
        factory\do_network_step!

      $expect_that sent, len eq 2
      $expect_that sent[1], has_fields
        recipient: eq SERVER_ID
        message: has_fields
          idemp_tok: eq idemp_tok
          name: eq 'test-factory-name'
          station_infos: deep_eq
            * name: 'test-station-name'
              train_name: 'test-train-name'
          stockpile_info: has_fields
            item: eq 'Stone Bricks'
            stored: eq 32
            capacity: eq 64
        protocol: eq InfoResponse\protocol!
      $expect_that sent[2], has_fields
        recipient: eq SERVER_ID
        message: has_fields
          idemp_tok: eq idemp_tok
          name: eq 'test-factory-name'
          station_infos: deep_eq
            * name: 'test-station-name'
              train_name: nil
          stockpile_info: has_fields
            item: eq 'Stone Bricks'
            stored: eq 32
            capacity: eq 64
        protocol: eq InfoResponse\protocol!

    describe '\\do_heartbeat_step', ->
      it 'sends a heartbeat', ->
        sent = {}
        broadcasted = {}
        SERVER_ID = 12345
        PC_ID = 54321
        PC_NAME = 'test-factory-name'

        config =
          factory:
            name: PC_NAME
            network: 'mainline'
          stations: {}
        pc = Pc TestPcBackend
          id: => PC_ID
          name: => PC_NAME
        stations =
          * Station TestStationBackend
              name: => 'test_station_1'
              train_name: => 'train_1'
          * Station TestStationBackend
              name: => 'test_station_2'
              train_name: => 'train_2'
        stockpile = Stockpile TestStockpileBackend!
        uplink = Uplink TestUplinkBackend
          send: (recipient, message, protocol) =>
            sent[] = :recipient, :message, :protocol
            true
          broadcast: (message, protocol) =>
            broadcasted[] = :message, :protocol
        with Factory config, pc, stations, stockpile, uplink
          \do_heartbeat_step!

        $expect_that sent, deep_eq {}

        $expect_that broadcasted, len eq 1
        $expect_that broadcasted[1], has_fields
          protocol: eq FactoryHeartbeat\protocol!
          message: do
            station_names =
              * 'test_station_1'
              * 'test_station_2'
            present_trains =
              test_station_1: 'train_1'
              test_station_2: 'train_2'

            deep_eq FactoryHeartbeat PC_ID, PC_NAME, station_names, present_trains

    -- describe '\\send_trains_present', ->
    --   it 'detects and sends trains', ->
    --     sent = {}
    --     broadcasted = {}
    --     SERVER_ID = 12345
    --     PC_ID = 54321
    --     PC_NAME = 'test-factory-name'
    --
    --     config =
    --       factory:
    --         name: PC_NAME
    --         network: 'mainline'
    --       stations: {}
    --     pc = Pc TestPcBackend
    --       id: => PC_ID
    --       name: => PC_NAME
    --     stations =
    --       * Station TestStationBackend
    --           name: => 'mallard_station'
    --           train_name: => 'mallard'
    --       * Station TestStationBackend
    --           name: => 'flying_scotsman_station'
    --           train_name: => 'flying_scotsman'
    --     stockpile = Stockpile TestStockpileBackend!
    --     uplink = Uplink TestUplinkBackend
    --       send: (recipient, message, protocol) =>
    --         sent[] = :recipient, :message, :protocol
    --         true
    --       broadcast: (message, protocol) =>
    --         broadcasted[] = :message, :protocol
    --     factory = Factory config, pc, stations, stockpile, uplink
    --     trains_by_station = factory\detect_trains!
    --
    --     expect_that sent, deep_eq {}
    --     expect_that broadcasted, deep_eq {}
    --     expect_that trains_by_station, deep_eq
    --       mallard_station: 'mallard'
    --       flying_scotsman_station: 'flying_scotsman'
    --
    --     factory\do_train_detection_step!
    --     expect_that sent, deep_eq {}
    --     expect_that broadcasted, deep_eq
    --       * protocol: TrainsPresent\protocol!
    --         message: TrainsPresent PC_NAME,
    --           mallard_station: 'mallard'
    --           flying_scotsman_station: 'flying_scotsman'

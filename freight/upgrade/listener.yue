local *

import 'freight.logger' as :log
import 'freight.upgrade.instigator' as :MarshalBumpRelease
import 'freight.upgrade.monitor' as :CurrentReleaseRequest, :CurrentReleaseResponse
import 'freight.upgrade.rebooter' as :MinecraftRebooter, :RebootRequest
import 'freight.upgrade.tester' as :Tester
import 'freight.version' as :VERSION
import 'quicktype' as :declare_type, :F, :T

declare_type 'UpgradeListener', [[{
  listen: () => !,
}]]
declare_type 'UpgradeListenerKind', '"leader"|"follower"'
declare_type 'UpgradeListenerConfig', [[{
  marshal: ?{},
}]]
export class UpgradeListener using Tester
  new: F '(UpgradeListenerConfig, Uplink, ?Rebooter) => <>', (config, @uplink, @rebooter=MinecraftRebooter!) =>
    @kind = T 'UpgradeListenerKind', if config.marshal?
      'leader'
    else
      'follower'

    @_current_release = nil

  listen: F '() => !', =>
    switch @kind
      when 'leader'
        @listen_as_leader!
      when 'follower'
        @listen_as_follower!
      else
        error "internal error: unknown listener kind '#{@kind}'"

  listen_as_leader: F '() => !', =>
    log -> "listening for upgrades as leader"
    parallel.waitForAny @\listen_for_release_bumps,
      @\listen_for_release_requests

  listen_for_release_bumps: F '() => !', =>
    local release
    while true
      _, { :release } = @uplink\receive_from_any MarshalBumpRelease
      if #release.content > fs.getFreeSpace '/'
        error "cannot upgrade: too little space, need #{#release.content}, but only #{fs.getFreeSpace '/'}/#{fs.getCapacity '/'} available"

      ok, err = @test release
      if ok
        break
      print "cannot apply update: #{err}"

    print "bumping release to version #{release.version}"
    @_current_release = release
    with assert io.open release.file, 'w+'
      \write release.content
      assert \close!

    print "issuing reboot broadcast"
    @uplink\deafen!
    @uplink\broadcast RebootRequest!
    @rebooter\reboot!

  listen_for_release_requests: F '() => !', =>
    while true
      requester_id, { :idemp_tok } = @uplink\receive_from_any CurrentReleaseRequest
      print "sending current release info to ##{requester_id}"
      @uplink\send_to requester_id, CurrentReleaseResponse idemp_tok, @current_release!

  current_release: F '() => Release', =>
    if @kind != 'leader'
      error 'internal error: non-leader requested current release'
    if @_current_release?
      return @_current_release

    content = do
      with assert io.open 'freight', 'r'
        content = assert \read '*a'
        assert \close!
      content
    @_current_release = T 'Release', file: 'freight', version: VERSION, :content
    @_current_release

  listen_as_follower: F '() => !', =>
    log -> "listening for upgrades as follower"
    @uplink\receive_from_any RebootRequest!
    @rebooter\reboot!

local *

import 'compat' as :apply_compat, :test_compat
apply_compat!

import 'quicktype' as :declare_type
declare_type 'Self', 'some'

import 'freight.args' as :Args
import 'freight.instrument' as :instrument
import 'freight.logger' as :log
import 'freight.monitor' as :detect_and_use_monitor
import 'quicktype' as :F
import 'spec' as :run_tests

import 'freight.cmd.clean'
import 'freight.cmd.disable'
import 'freight.cmd.enable'
import 'freight.cmd.init'
import 'freight.cmd.start'
import 'freight.cmd.upgrade'
import 'freight.logger'
import 'spec'

global skip_minecraft_tests = false

main = (raw_args) ->
  args, ok = Args::parse raw_args
  if not ok
    return

  logger.set_log_verbosity args.verbose
  spec.set_log_verbosity args.verbose

  if args.instrument
    instrument -> run args
  else
    run args

run = (args) ->
  if args.test?
    skip_minecraft_tests = args.test.no_minecraft
    run_tests args.test.filter
  else if args.start?
    if not args.ignore_monitor
      detect_and_use_monitor!
    start.main args.start
  else if args.init?
    init.main args.init
  else if args.clean?
    clean.main args.clean
  else if args.enable?
    enable.main args.enable
  else if args.disable?
    disable.main args.disable
  else if args.upgrade?
    upgrade.main args.upgrade
  else
    error 'internal error: no command recognised'

spec.spec ->
  import 'spec' as :describe, :it

  describe 'compat', ->
    it 'passes checks', ->
      test_compat!

args = {...}
ok = true
try
  main args
catch err
  if err != 'EXIT(0)'
    print debug.traceback err
    ok = false
if not ok
  os.exit 1
